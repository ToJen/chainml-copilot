{"id": "cfc5e0e2faf6", "text": "delvtech /council-kit Public\nHistory  / Home\nRevisions\nUpdated Home (markdown)\n MazyGio  committed on Mar 955623a7\nUpdated Home (markdown)\n CPSTL  committed on Mar 94c72b66\nUpdated Home (markdown)\n CPSTL  committed on Mar 86e59f50\nUpdated Home (markdown)\n CPSTL  committed on Mar 840e73a1\nUpdated Home (markdown)\n CPSTL  committed on Jan 1180c8009\nupdate home copy\n CPSTL  committed on Jan 11a9dad6a\nUpdated Home (markdown)\n CPSTL  committed on Jan 1009d8f3d\nInitial Home page\n CPSTL  committed on Jan 10654ec96Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nCompare revisions", "metadata": {"page_number": 1, "source": "data/delv_council_docs.pdf"}}
{"id": "f952d8338a3f", "text": "delvtech /council-kit Public\nGovernance Proposal Framework Template (Council)\nJump to bottom\nAlim edited this page on Mar 8  \u00b7 9 revisions\nGuidelines to keep in mind when creating a Governance Proposal\nFramework\n1. Explicitness:  A proposal should clearly define and address a specific behavior or single responsibility . If it\nproposes multiple actions, it should be split into multiple explicit proposals.\n2. Completeness:  A proposal should be thorough. Relevant particulars should not be left undefined or\nunreferenced.\n3. Avoid Overlap:  Multiple independent proposals should not propose the implementation of the same type of\nbehavior . Review active proposals to avoid overlap.\n4. Clarity:  A proposal should be as clear and as easy to understand as possible. Be succinct, use simple\nlanguage, and consider having a peer in the community review prior to submission.\nCreate V enues For Participating in Governance & Discussion\nSome examples of common practices for governance venues:", "metadata": {"page_number": 2, "source": "data/delv_council_docs.pdf"}}
{"id": "b2cd37d8c24b", "text": "language, and consider having a peer in the community review prior to submission.\nCreate V enues For Participating in Governance & Discussion\nSome examples of common practices for governance venues:\nGovernance Forum : Forums are the best way to get yourself up to date with the current state of governance and\njoin in on community discussions. The forum should be the go-to place for submitting proposals, discussing\ngovernance proposals, DAO discussions, voting on both of f-chain and on-chain proposals, and much more. Some\nexamples of forums used to date are:\nCommonwealth\nDiscourse\nSnapshot (Off-Chain Polling) : Snapshot is an of f-chain polling system that provides a simple voting interface that\nallows users to signal sentiment on proposals (directly). This is typically used as a way to gauge if a proposal\nshould move onto an on-chain vote.\nSnapshot.org\nGovernance Dashboard (Council Reference UI):  This is a part of the Council Kit tooling framework, and allows", "metadata": {"page_number": 2, "source": "data/delv_council_docs.pdf"}}
{"id": "28915b167171", "text": "should move onto an on-chain vote.\nSnapshot.org\nGovernance Dashboard (Council Reference UI):  This is a part of the Council Kit tooling framework, and allows\nyour governance system to have a dedicated UI for on-chain voting. This UI allows users to review information on\nproposals, delegate voting power , view other voter profiles and their voting activity , and participate in on-chain\nvoting.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 2, "source": "data/delv_council_docs.pdf"}}
{"id": "89cfff10f1a1", "text": "Discord #Governance Channel:  If your project already uses Discord as a community management system, think\nabout creating a dedicated governance channel in your server to allow governance participants to discuss proposal\nideas, provide feedback on current proposals, share opinions on current polls and votes, and more.\nDiscord\nExample of a Governance Process for DAOs \nProposal T ypes\n1) Protocol (Executable) Proposals\nThis category of proposals should be used when implementation involves the execution of one or more smart\ncontract operations by accounts controlled by the DAO.\nExamples: Technical upgrades to the governed Protocol, additional features, incentive programs, and more.\nExecutable Proposals will pass by a simple majority if the quorum has been met. Note that quorum isn\u2019t a\npercentage but rather an absolute amount. There are specific types of votes that can have lower or higher\nquorums. For example, grants spending may entail various amounts of disbursements and having distinct", "metadata": {"page_number": 3, "source": "data/delv_council_docs.pdf"}}
{"id": "a71de0dc01f6", "text": "percentage but rather an absolute amount. There are specific types of votes that can have lower or higher\nquorums. For example, grants spending may entail various amounts of disbursements and having distinct\nquorums for each level of spending. Or , for governance actions such as freezing the protocol, one might\nchoose a high quorum for further security .\n2) DAO (Social) Proposals\nThis category of proposals should be used when a community member makes a request of the DAO that\ncannot be executed or enforced on-chain.\nExamples: Adding, improving, or removing governance processes, such as updating the Governance process\nitself or migrating forums or communication channels to other venues.\nAn Example of the Proposal Process:\nDetailed Summary\n1. Anyone can post a proposal on the forum for discussion within the community . All proposals follow the same\ngeneral process from idea to acceptance, with the exception of a review period for Protocol proposals after the\nOff-chain (Snapshot) Polling stage, for code review .", "metadata": {"page_number": 3, "source": "data/delv_council_docs.pdf"}}
{"id": "197e5f83e2ae", "text": "1. Anyone can post a proposal on the forum for discussion within the community . All proposals follow the same\ngeneral process from idea to acceptance, with the exception of a review period for Protocol proposals after the\nOff-chain (Snapshot) Polling stage, for code review .\n2. Using the governance proposal framework guidelines, a proposal is created and submitted to the DAO\ngovernance forum as an idea or skipping the idea and going to a Draft. In the forum, proposals are typically\nposted under the proposal type topics/categories.\ni. Example: DAO (Social) Proposals\n3. Once it has been posted as a Draft, all questions and comments should be addressed and taken into\nconsideration, to further improve the proposal before moving to the next stage. If they are ignored, it is less\nlikely that the proposal will pass the subsequent of f-chain poll on Snapshot.\n4. Once the author of the proposal has incorporated any relevant feedback and made the necessary revisions,\nthe forum admin will mark the proposal as of ficially \u201cProposed\u201d.", "metadata": {"page_number": 3, "source": "data/delv_council_docs.pdf"}}
{"id": "e72ef174be29", "text": "5. Once the proposal has been marked with the \u201cProposed\u201d status on the forum or the author has stated it is\nofficially ready to move forward, there will be a 1 week review period  for the community to review , discuss,\nand prepare for the Of f-Chain Poll.\n6. After the 1 week review period, the proposal will of ficially proceed to the of f-chain poll step.\n7. After the Snapshot poll has finished (the voting period is 5 days):\ni. For DAO Proposals, this is the final decision of the proposal being of ficially accepted or rejected by the\ncommunity .\nii. For Protocol Proposals, the sentiment of the community will be of ficially captured. If the poll passes, it will\nadvance to the next stage of the lifecycle. If the poll is rejected, the author may go back and update it to\nbetter position it for future consideration.\n8. After the successful passing of the of f-chain poll, the Protocol Proposal must go through a long enough review", "metadata": {"page_number": 4, "source": "data/delv_council_docs.pdf"}}
{"id": "111561fa33f2", "text": "better position it for future consideration.\n8. After the successful passing of the of f-chain poll, the Protocol Proposal must go through a long enough review\nperiod that allows suf ficient time for an of ficial code audit/review and be deemed safe to advance to an on-\nchain poll and possible execution.\n9. Once the review period is complete (along with the audit/review), the proposal will move to an on-chain vote\n(the voting period is 8 days max). The outcome of the on-chain vote will dictate whether or not it is executable.\nIf it passes, it is of ficially accepted and can move to execution into the governed protocol. If it is rejected, no\nexecution will occur .\n10. After a Protocol proposal has been executed, the changes are updated on-chain to the protocol, and the\nlifecycle of the proposal concludes.\nProposal Lifecycles\nAn Example of a DAO (Social) Proposal Lifecycle Breakdown & Criteria", "metadata": {"page_number": 4, "source": "data/delv_council_docs.pdf"}}
{"id": "28178e56000b", "text": "Official Status Lifecycle for a DAO (Social) Proposal\n[Idea]  [Draft]  [Proposed]  [Off-chain Poll]  [Accepted/Rejected]\nOfficial Status Lifecycle for a DAO (Social) Proposal (including review periods)\n[Idea]  [Draft]  [Proposed]  [Review]  [Off-chain Poll]  [Accepted/Rejected]\nIdea\nThe Idea status is an informal stage of the lifecycle of a DAO governance proposal. This stage involves an idea\nbeing seeded for a proposal and made available for discussion in Discord, the forum, or Twitter (whatever is\nthe preferred venue).\nDraft\nThe Draft  status is a formal status on the governance forum, where a proposal has been created using the\nprovided template in hopes of obtaining feedback and ultimately garnering the community's support. Based on\ncommunity feedback, the author of the proposal should make updates and edits to the proposal. The goal of\nthe Draft proposal status is to obtain suf ficient feedback and support to achieve soft consensus in order to", "metadata": {"page_number": 5, "source": "data/delv_council_docs.pdf"}}
{"id": "6bf9a77b5298", "text": "community feedback, the author of the proposal should make updates and edits to the proposal. The goal of\nthe Draft proposal status is to obtain suf ficient feedback and support to achieve soft consensus in order to\nconfidently proceed with the formal process without it being immediately shot down. The draft proposal status\nalso helps avoid having \u201cgarbage proposals\u201d make it through to Of f-chain polls and helps eliminate voting\nfatigue that the community would face without this stage.\nOnce posted on the governance forum as a Draft , all questions and comments should be addressed and taken\ninto consideration, to further improve the proposal before moving to the next stage. If they are ignored, it is less\nlikely that the proposal will pass the Of f-chain Poll.\nProposed\nThe Proposed  status is a formal status on the governance forum, where a proposal has of ficially been\nsubmitted to proceed to the Of f-Chain Poll stage after the dedicated review period. If the Draft proposal did not", "metadata": {"page_number": 5, "source": "data/delv_council_docs.pdf"}}
{"id": "c140623a020c", "text": "Proposed\nThe Proposed  status is a formal status on the governance forum, where a proposal has of ficially been\nsubmitted to proceed to the Of f-Chain Poll stage after the dedicated review period. If the Draft proposal did not\ncontain any of ficial code and just a specification, this proposal would include the exact code that will be\nexecuted. This way anyone could verify the hash that is included on-chain.\nOnce a proposal has been submitted under this status, it will of ficially be given an ID. IDs are given based on\nincrements of submission. For example, the first proposal will be [EGP-1]: Title of Proposal. The second\nproposal would be [EGP-2]: Title of Proposal and so on.\nReview Period (suggested)\nThe In-Review  status is a formal status on the governance forum, where a proposal sits in review for the\ncommunity to discuss and prepare for the upcoming Off-Chain Poll.  A proposal that has completed the review", "metadata": {"page_number": 5, "source": "data/delv_council_docs.pdf"}}
{"id": "71709696e501", "text": "Review Period (suggested)\nThe In-Review  status is a formal status on the governance forum, where a proposal sits in review for the\ncommunity to discuss and prepare for the upcoming Off-Chain Poll.  A proposal that has completed the review\nperiod , will proceed to a final Of f-chain poll (Snapshot).\nDAO (Social) Proposals Review Period: 1 week\nOff-Chain Poll (Snapshot)\nThe Off-Chain Poll  status is a formal status on the governance forum. Of f-chain polls can be voted on directly\non the Snapshot.org  page and will ultimately decide if a DAO proposal is accepted or rejected by the\ncommunity .", "metadata": {"page_number": 5, "source": "data/delv_council_docs.pdf"}}
{"id": "00f8b1967109", "text": "Accepted/Rejected (Final Status for DAO Proposals)\nThe Accepted/Rejected  status is the final state of a proposal after being voted on. If it passes, it is of ficially\naccepted by the community (with actions of the proposal being implemented) and is given the Accepted status.\nIf not, the proposal is rejected and labeled as such.\nAn Example of a Protocol (Executable) Proposal Lifecycle Breakdown & Criteria**\nOfficial Status Lifecycle for a Protocol (Executable) Proposal\n[Idea]  [Draft]  [Proposed]  [Off-chain Poll]  [On-chain V ote]  [Accepted/Rejected]  [Execution]\nFull Lifecycle For A Protocol (Executable) Proposal (including review periods)\n[Idea]  [Draft]  [Proposed]  [Review]  [Off-chain Poll]  [Review]  [On-chain V ote] \n [Accepted/Rejected]  [Execution]\nIdea", "metadata": {"page_number": 6, "source": "data/delv_council_docs.pdf"}}
{"id": "7ada0c284d1a", "text": "[Idea]  [Draft]  [Proposed]  [Review]  [Off-chain Poll]  [Review]  [On-chain V ote] \n [Accepted/Rejected]  [Execution]\nIdea\nThe Idea status is an informal stage of the lifecycle of a DAO governance proposal. This is when an idea is\nseeded for a proposal and has been posted on Discord, the forum, or even Twitter .\nDraft\nThe Draft  status is a formal status on the governance forum, where a proposal has been created using the\nprovided template in hopes of obtaining feedback and ultimately garnering the community's support. Based on\ncommunity feedback, the author of the proposal should make updates and edits to the proposal. The goal of\nthe Draft proposal status is to obtain suf ficient feedback and support to achieve soft consensus in order to", "metadata": {"page_number": 6, "source": "data/delv_council_docs.pdf"}}
{"id": "cab0e4a37a54", "text": "confidently proceed with the formal process without it being immediately shot down. The draft proposal status\nalso helps avoid having \u201cgarbage proposals\u201d make it through to Of f-chain polls and helps eliminate voting\nfatigue that the community would face without this stage.\nOnce posted on the governance forum as a Draft , all questions and comments should be addressed and taken\ninto consideration, to further improve the proposal before moving to the next stage. If they are ignored, it is less\nlikely for the proposal to pass the Of f-chain Poll.\nProposed\nThe Proposed  status is a formal status on the governance forum, where a proposal has of ficially been\nsubmitted to proceed to the Of f-Chain Poll stage after the dedicated review period. If the Draft proposal did not\ncontain any of ficial code and just a specification, this proposal would include the exact code that will be\nexecuted. This way anyone could verify the hash that is included on-chain.", "metadata": {"page_number": 7, "source": "data/delv_council_docs.pdf"}}
{"id": "d9940107d42a", "text": "contain any of ficial code and just a specification, this proposal would include the exact code that will be\nexecuted. This way anyone could verify the hash that is included on-chain.\nOnce a proposal has been submitted under this status, it will of ficially be given an ID. IDs are given based on\nincrements of submission. For example, the first proposal will be [GP-1]: Title of Proposal. The second\nproposal would be [GP-2]: Title of Proposal and so on.\nReview Period (not an official proposal status)\nThe In-Review  status is a formal status on the governance forum, where a proposal sits in review for the\ncommunity to discuss and prepare for the upcoming Off-Chain Poll.\nProtocol (Executable) Proposals Review Period: 1 week\nOff-Chain Poll (Snapshot)\nThe Off-Chain Poll  status is a formal status on the governance forum and can be voted on directly in the", "metadata": {"page_number": 7, "source": "data/delv_council_docs.pdf"}}
{"id": "0536b171bd87", "text": "Protocol (Executable) Proposals Review Period: 1 week\nOff-Chain Poll (Snapshot)\nThe Off-Chain Poll  status is a formal status on the governance forum and can be voted on directly in the\nforum or directly on the Snapshot page ( link). A proposal that has completed the review period , will proceed to\nan Of f-chain poll (Snapshot). The main requirement of a Protocol proposal on Snapshot is to include Calldatas\nand Targets should be included to verify the on-chain proposalHash when it is created.\nThe goal of the Of f-Chain Poll is to gather community sentiment towards the proposal and gather feedback to\ndirect the preferred path. This Poll allows the community to reach a rough consensus to maximize the chances\nof a positive outcome of the On-chain vote submission.\nReview Period (not an official proposal status)\nThis review period is for Protocol proposal code review . If the code is already audited it may be a short period", "metadata": {"page_number": 7, "source": "data/delv_council_docs.pdf"}}
{"id": "6bf645465611", "text": "of a positive outcome of the On-chain vote submission.\nReview Period (not an official proposal status)\nThis review period is for Protocol proposal code review . If the code is already audited it may be a short period\nof time but if the audit or review has not started, the proposal should not move to an on-chain vote until it has\nbeen complete. The review period is meant to start out as flexible but may become more strict as the\ngovernance process evolves. Transparency and communication are encouraged by the proposal author during\nthis stage.\nOn-chain V ote\nThe On-chain V ote status is a formal status on the governance forum where proposals can be voted on\ndirectly on the of ficial governance dashboard/UI.\nAccepted/Rejected", "metadata": {"page_number": 7, "source": "data/delv_council_docs.pdf"}}
{"id": "fb090174b97b", "text": "The Accepted/Rejected  status is the final stage of a proposal after being voted on. If it passes, it is of ficially\naccepted and is given the Accepted status. If not, the proposal is rejected and labeled as such.\nExecutable/Executed (For Protocol Proposals only)\nOnce a proposal has reached the winning quorum (specific number), the proposal may be executed. This\nstatus states that the proposal is ready to be of ficially executed.\nGovernance Proposal (GP) T emplates:\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nWhat Governance Operates (Using Council) \nGovernance Parameters\nGeneral Governance:\nQuorum:  The required minimum number of voting power in support of a proposal for it to succeed (this value is\nfixed and not a percentage of total voting power).\nTimelock Duration:  The timelock is a speed bump for calls. It requires calls to wait for a defined period before", "metadata": {"page_number": 8, "source": "data/delv_council_docs.pdf"}}
{"id": "80d1d8517163", "text": "fixed and not a percentage of total voting power).\nTimelock Duration:  The timelock is a speed bump for calls. It requires calls to wait for a defined period before\nthey can be executed. After a call is registered, the call can be removed during the waiting period, and an\nauthorized address can extend the waiting period only once.\nVoting Period:  The total voting period in which votes can be cast. [Minimum voting period][extra voting period]\nis the layout of the total time for voting.\nMinimum V oting Period:  The minimum voting time before a vote can be executed.\nExtra V oting Period:  The remaining time beyond the minimum voting period in which votes can be cast.\nProposal Threshold:  The amount of voting power needed to submit a governance proposal on-chain.\nVesting V ault T oken Multiplier (Optional - depending on whether or not you use this voting vault):  The\nvesting vault contract is used to set up long-term grants for core contributors to the governed protocol\u2019 s", "metadata": {"page_number": 8, "source": "data/delv_council_docs.pdf"}}
{"id": "8858f441c2d3", "text": "Vesting V ault T oken Multiplier (Optional - depending on whether or not you use this voting vault):  The\nvesting vault contract is used to set up long-term grants for core contributors to the governed protocol\u2019 s\necosystem. It is also a voting vault so that community members can vote with vested but unclaimed tokens and\nunvested tokens. The multiplier  for voting power on the vesting vault allows locked / vesting positions to still\nhave voting power in the governance system and does so by using a defined multiplier for the vested tokens\nover unvested.\nGSC Parameters (Optional - depending on whether or not you use a GSC in your model):\nGSC Delegation Threshold:  A threshold of delegated voting power , giving delegates a seat on the GSC. This\ncomes with additional governance powers within the system, and as a result, additional responsibilities.\nGSC Quorum:  The required minimum number of GSC members needed to support a proposal for it to\nsucceed.", "metadata": {"page_number": 8, "source": "data/delv_council_docs.pdf"}}
{"id": "8dd5b4dc99cf", "text": "comes with additional governance powers within the system, and as a result, additional responsibilities.\nGSC Quorum:  The required minimum number of GSC members needed to support a proposal for it to\nsucceed.\nGSC Proposal Threshold:  The amount of GSC members needed to propose a GSC vote on-chain.\nProtocol Parameters", "metadata": {"page_number": 8, "source": "data/delv_council_docs.pdf"}}
{"id": "88445a4c1d54", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 9, "source": "data/delv_council_docs.pdf"}}
{"id": "80e0a5387f45", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit ReportsProtocol Upgrades:  Should the governed DAO community decide to upgrade the governed Protocol, it will go\nthrough governance. These types of changes will go through the process defined for Protocol Proposals.", "metadata": {"page_number": 9, "source": "data/delv_council_docs.pdf"}}
{"id": "e4a057537e23", "text": "Clone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 10, "source": "data/delv_council_docs.pdf"}}
{"id": "b308a5deed0a", "text": "delvtech /council-kit Public\nJune 17, 2023 \u2013 June 24, 2023\nOverview\n7 Active pull requests\n0 Active issues\n 7\nMerged pull requests 0\nOpen pull requests\n 0\nClosed issues 0\nNew issues\nCould not load contribution data\nPlease try again later\nAdd changeV aultStatus to SDK\n#397  merged 22 minutes agoCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nPulse\nContributors\nCommunity Standards\nCommits\nCode frequency\nDependency graph\nNetwork\nForks\n 1 week  \nPeriod:\n 7 Pull requests merged by 2 people", "metadata": {"page_number": 11, "source": "data/delv_council_docs.pdf"}}
{"id": "8c90d8fc8f8a", "text": "[SDK] Add set lock duration\n#396  merged 7 hours ago\nAdd fallback UI on mobile when no proposals exist\n#395  merged 11 hours ago\nUpdate localhost.ts default config\n#394  merged 12 hours ago\n[CLI] Fix voting power errors on localhost due to stale block lag\n#393  merged 2 days ago\nFix voting power stat in locking vault\n#392  merged 2 days ago\n[CLI] Add simple deploy command\n#391  merged 3 days ago\nSometimes conversations happen on old items that aren\u2019t yet closed. Here is a list of all the Issues and Pull Requests with\nunresolved conversations.\nAdded Opt-in/out button to start receiving notifications from Push\n#342 commented on 3 days ago  \u2022 0 new comments\nfeat: add airdrop ui\n#388 commented on last week  \u2022 0 new comments 2 Unresolved conversations", "metadata": {"page_number": 12, "source": "data/delv_council_docs.pdf"}}
{"id": "8e1e1f0668c4", "text": "delvtech /council-kit Public\nSpender\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 2 revisions\nContract Name: Spender .sol\nType/Category: Treasury/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/features/Spender .sol\n1. Introduction (Summary)\nThe spender contract is designed to leverage the variable quorum requirements of the core voting contract to\nenable a very small-scale grant program.\n2. Contract Details\nKey Functionalities:\nSpend a number of tokens up to a high, medium, or low threshold via separate functions for high, medium, and\nlow spends. Allow the owner to remove the tokens from this contract.\nState:\nHigh, medium, and low spending thresholds\nTracking the block by historical block spending ensures that a threshold is violated in no block.", "metadata": {"page_number": 13, "source": "data/delv_council_docs.pdf"}}
{"id": "701f58c9b034", "text": "low spends. Allow the owner to remove the tokens from this contract.\nState:\nHigh, medium, and low spending thresholds\nTracking the block by historical block spending ensures that a threshold is violated in no block.\n3. Key Mechanisms & Concepts\nThe contract contains some tokens and then allows an owner address to spend tokens from this contract. The\nowner of the contract will be the core voting contract. In the core voting contract, each of the spending functions\nshould be given its own quorum. In this setup, this contract enables small and correspondingly low-security grants\nto fund non-contentious community-driven projects which are low expenditure.\n4. Gotchas (Potential source of user error)\nThe expenditure in each block is tracked in aggregate, so if a low spend is successful, a following high spend in the\nsame block can only spend up to (high spend bound - low spend bound).Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 13, "source": "data/delv_council_docs.pdf"}}
{"id": "ea090a6d3729", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 14, "source": "data/delv_council_docs.pdf"}}
{"id": "be308e10e77c", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nIn the case of contract failure, the owner should remove funds from the contract.", "metadata": {"page_number": 14, "source": "data/delv_council_docs.pdf"}}
{"id": "aa3d20c3a5fa", "text": "Audits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 15, "source": "data/delv_council_docs.pdf"}}
{"id": "7de5965cdbed", "text": "delvtech /council-kit Public\nTimelock\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 2 revisions\nContract Name: Timelock.sol\nType/Category: Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/features/T imelock.sol\n1. Introduction (Summary)\nThe timelock is a speed bump for calls. It requires calls to wait for a period before they can be executed. After a call\nis registered, the call can be removed during the waiting period, and an authorized address can extend the waiting\nperiod only once.\n2. Contract Details\nThe key functions in the time lock are the ability for an owner to register a call via a 32 byte hashed identifier , to\nremove the registered call, to allow anyone to run that call after a customizable period of time, and the ability", "metadata": {"page_number": 16, "source": "data/delv_council_docs.pdf"}}
{"id": "e13e78481c53", "text": "The key functions in the time lock are the ability for an owner to register a call via a 32 byte hashed identifier , to\nremove the registered call, to allow anyone to run that call after a customizable period of time, and the ability\nfor authorized addresses to add an optional one time delay in addition to the regular delay in the contracts.\nThe state in the timelock is a mapping of registered calls to execution timestamps, authorized addresses, and\nan address that can register calls.\n3. Key Mechanisms & Concepts\nThe timelock is a mechanism to ensure that any security-critical votes that execute a call or bundle of calls have a\nminimum review time to allow the community to check that the calls have no unintended side ef fects. After the core\nvoting contract votes something that is high security-critical, a hash of the information of the calls to be executed\nwill be registered with the timelock.\nAfter waiting a minimum amount of time, anyone can call the timelock to execute the call or set of calls. Suppose", "metadata": {"page_number": 16, "source": "data/delv_council_docs.pdf"}}
{"id": "07af2b9ddce2", "text": "voting contract votes something that is high security-critical, a hash of the information of the calls to be executed\nwill be registered with the timelock.\nAfter waiting a minimum amount of time, anyone can call the timelock to execute the call or set of calls. Suppose\nthe proposal is reviewed and an error is identified during the review period. In that case, the core voting contract\nmust vote again to remove the call from the timelock. Because core voting has a minimum vote time, the ef fective\ntimelock period is the timelock period minus the minimum voting time. To mitigate this, authorized addresses [such\nas the GSC] can do a one-time per call increase in lock time for a registered call. The time bump should be slightly\nmore than the minimum voting time to enable removal votes.\nThe timelock can upgrade its stored parameters such as the delay time and the amount of bump time by making a\ncall to itself which sets these pieces of information.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 16, "source": "data/delv_council_docs.pdf"}}
{"id": "9db19a04e4eb", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault4. Gotchas (Potential source of user error)", "metadata": {"page_number": 17, "source": "data/delv_council_docs.pdf"}}
{"id": "7a3193081ab4", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault4. Gotchas (Potential source of user error)\nCalls registered with the contract must all succeed or the whole bundle will fail.\nCalls cannot re-access the timelock as a reentrancy lock protects it.\nTimelocks should not be used for emergency mitigation functionality and security response functionality , such\nas pause controls. Because of the slowdown, they may not be able to respond to disclosures of security bugs\nin time.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nSince the timelock controls its parameters, the timelock can upgrade itself to a non-functional state by , for instance,\nmaking the address that registers calls one which cannot send transactions that register calls or setting the delay to\na very large number . Parameter setting should be done with a high amount of care.", "metadata": {"page_number": 17, "source": "data/delv_council_docs.pdf"}}
{"id": "336fc34694fe", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 18, "source": "data/delv_council_docs.pdf"}}
{"id": "c9cd15e65644", "text": "delvtech /council-kit Public\nTreasury\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\n Pages 25Contract Name: Treasury .sol\nType/Category: Treasury/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/features/T reasury .sol\n1. Introduction (Summary)\nThe Treasury contract is an isolated holder of Element governance funds that allows an authorized address to\nmove them. This isolation improves the security of the system and prevents a bug from compounding to total fund\nloss.\n2. Contract Details\nThe contract only contains the functionality to allow an authorized address to move the ERC20 and ETH tokens it\ncontains; to set ERC20 allowances or to make generic calls. The stored data is the authorized address.\n3. Key Mechanisms & Concepts", "metadata": {"page_number": 19, "source": "data/delv_council_docs.pdf"}}
{"id": "221f927e399b", "text": "The contract only contains the functionality to allow an authorized address to move the ERC20 and ETH tokens it\ncontains; to set ERC20 allowances or to make generic calls. The stored data is the authorized address.\n3. Key Mechanisms & Concepts\nThe contract receives a call from an address and then checks if it is authorized to move funds. If the address is\nauthorized, it makes an ERC20 transaction that can move funds or set allowances.\n4. Gotchas (Potential source of user error)\nSending the funds to the wrong address (person or contract) or approving the wrong contract can result in the loss\nof funds.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nIt is important to note that, if the ownership of the contract is reset, it should be reset to an address that can make\ncalls or the funds in the treasury will be frozen in place.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 19, "source": "data/delv_council_docs.pdf"}}
{"id": "e5e1e8f627cf", "text": "Council W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)", "metadata": {"page_number": 20, "source": "data/delv_council_docs.pdf"}}
{"id": "2455d0e15fcd", "text": "Core V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 20, "source": "data/delv_council_docs.pdf"}}
{"id": "66fe4177e019", "text": "delvtech /council-kit Public\nVesting V ault\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: V estingV ault.sol\nType/Category: V oting V ault/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/vaults/V estingV ault.sol\n1. Introduction (Summary)\nThe vesting vault contract is used to set up long-term grants for core contributors to the Element ecosystem, but its\nflexible approach enables it to be used for many other types of grants as well. It is also a voting vault so that\ncommunity members can vote with vested but unclaimed tokens and unvested tokens.\n2. Contract Details\nKey Functionalities:\nAbility to create grants which release over time with an optional clif f.\nAbility to remove grants for exited contributors.", "metadata": {"page_number": 21, "source": "data/delv_council_docs.pdf"}}
{"id": "e14f4673cdd9", "text": "2. Contract Details\nKey Functionalities:\nAbility to create grants which release over time with an optional clif f.\nAbility to remove grants for exited contributors.\nGrant holders should be able to vote and delegate votes with their locked tokens.\nGrant holders should be able to claim their tokens on schedule.\nState:\nA mapping tracking of the historical voting power .\nA mapping tracking grants.\nContract solvency information.\nOwnership information.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 21, "source": "data/delv_council_docs.pdf"}}
{"id": "01e7df687bef", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework3. Key Mechanisms & Concepts\nThe contract allows a manager to create vesting grants using a balance of tokens that are stored in the contract.\nEach grant has a non-vesting period, and an optional clif f followed by a linear vesting period. The created grants\ncannot add up to a total amount more than what is in the contract. Each grant holder can delegate their votes to", "metadata": {"page_number": 22, "source": "data/delv_council_docs.pdf"}}
{"id": "c70aa8028acd", "text": "Each grant has a non-vesting period, and an optional clif f followed by a linear vesting period. The created grants\ncannot add up to a total amount more than what is in the contract. Each grant holder can delegate their votes to\nother addresses, and the contract state keeps a record of historical votes that are compatible with the core voting\ncontract requirements. In addition to a historical voting power record, the contract also stores user grants in a\nmapping. When a grant is removed for a contributor , any unlocked tokens are transferred to them, and their grant is\nremoved.\n4. Gotchas (Potential source of user error)\nThe grant administrator cannot create more outstanding grants than the token which have been deposited.\nThey must use the deposit method for that deposit to be recognized.\nAny tokens or ETH directly transferred to the contract cannot be removed and are locked forever .\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)", "metadata": {"page_number": 22, "source": "data/delv_council_docs.pdf"}}
{"id": "a5a79b3a4eb3", "text": "They must use the deposit method for that deposit to be recognized.\nAny tokens or ETH directly transferred to the contract cannot be removed and are locked forever .\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nThe vesting vault contract should only be operated as an upgradeable proxy component because the storage\nlibrary used is intended for that application.\nIn the case of compromise of the grant funding address, all funds in this contract are at risk. And, in the case of\ncompromise of the upgrade system, all funds in this contract are at risk.", "metadata": {"page_number": 22, "source": "data/delv_council_docs.pdf"}}
{"id": "176c971f367b", "text": "Governance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 23, "source": "data/delv_council_docs.pdf"}}
{"id": "ddf3b166a8ed", "text": "delvtech /council-kit Public\nVoting V aults Overview\nJump to bottom\nCPSTL  edited this page on Jan 11  \u00b7 2 revisions\n Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment GuideOverview\nVoting V aults provide the ability to assign voting power to specific types of tokens/positions. The result is beautiful\n\u2014 governance users can maximize capital ef ficiency while maintaining the ability to delegate or vote when the time\ncomes. V oting vaults are designed to be upgraded, allowing for voting vault logic to be updated by governance and\nto avoid the pains that come with governance upgrade migrations. The creation of a voting vault begins with\ndefining a strategy for counting votes / providing voting power . Once the logic has been established, governance\nwill vote to approve the method, and if successful, the integration is complete, and users can start voting.\nWhat are voting vaults?", "metadata": {"page_number": 24, "source": "data/delv_council_docs.pdf"}}
{"id": "5546afa008dd", "text": "defining a strategy for counting votes / providing voting power . Once the logic has been established, governance\nwill vote to approve the method, and if successful, the integration is complete, and users can start voting.\nWhat are voting vaults?\nVoting vaults are simply smart contracts that allow any programmable logic to be used for allocating voting power to\ngovernance participants.\nSome example metrics include:\nReputation or merit-based systems\nUser protocol usage metrics\nUser governance participation data\nToken-holding\nPositions in DeFi protocols (staked assets, collateral, LP  positions, etc.)\nAny other metric or combination of metrics\nThis gives the community complete modularity and flexibility over how to structure a DAO's governance framework.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 24, "source": "data/delv_council_docs.pdf"}}
{"id": "38ec42240103", "text": "Reference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards", "metadata": {"page_number": 25, "source": "data/delv_council_docs.pdf"}}
{"id": "4c574b4177ff", "text": "Voting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 25, "source": "data/delv_council_docs.pdf"}}
{"id": "ab033f3a5426", "text": "delvtech /council-kit Public\nHome\nJump to bottom\nMazyGio edited this page on Mar 9  \u00b7 8 revisions\nIntroduction to Council\nCouncil represents the next evolution of on-chain governance, allowing anyone to build adaptable governance\nsystems that meet both the practical needs of day-to-day activities and the required flexibility of long-term\ngovernance.\nThe Council Protocol and Council Kit enable builders to use the security of on-chain governance while allowing for\nunprecedented modularity and flexibility .\nCouncil is here to reinvigorate the standard model for DAO governance - keeping decentralization at the forefront\nand allowing DAOs to scale their decision-making.\nKey Features of the Protocol\nThe Council Protocol's key value proposition is the introduction of new governance primitives, which will enable a\nnew era of experimentation:\n Core V oting:\nThis system begins with the core which is all that is needed at the base layer . All additional functionality can be", "metadata": {"page_number": 26, "source": "data/delv_council_docs.pdf"}}
{"id": "d89ed7065e21", "text": "new era of experimentation:\n Core V oting:\nThis system begins with the core which is all that is needed at the base layer . All additional functionality can be\nadded by selecting desired modules. The Core defines the voting process for those with governance power ,\ntracks proposals, and retrieves user voting power from approved V oting V aults.\n Voting V aults:\nVoting V aults enable governance participation to be more inclusive and capital ef ficient. V aults can be created\nby defining strategies for assigning voting power to dif ferent use cases.\n GSC:\nThe Governance Steering Council (GSC) enables scalable decision-making for DAOs. The GSC is a group of\nrepresentatives elected on a rolling-basis model of delegation and must maintain a minimum level of voting\npower to remain on the Council. Council members can create, vote, and execute proposals and can be\nassigned further duties through the governance process.", "metadata": {"page_number": 26, "source": "data/delv_council_docs.pdf"}}
{"id": "2b5e1226b36e", "text": "representatives elected on a rolling-basis model of delegation and must maintain a minimum level of voting\npower to remain on the Council. Council members can create, vote, and execute proposals and can be\nassigned further duties through the governance process.\n Optimistic Rewards and Grants:Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 26, "source": "data/delv_council_docs.pdf"}}
{"id": "ff4e06160f0a", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDKA new structure that assumes the best out of grantees & of fers tools to empower the delivery of grant outlines\nA way to move rewards calculation of f-chain and alleviate the limitations of traditional rewards programs.\nBuild with Council Kit\nCouncil Kit goes beyond the smart contracts and positions Council as an all-in-one governance framework. The Kit\ncomes with a suite of tools to create and bootstrap DAOs.\n Deployment T emplate:", "metadata": {"page_number": 27, "source": "data/delv_council_docs.pdf"}}
{"id": "640dcd586803", "text": "Build with Council Kit\nCouncil Kit goes beyond the smart contracts and positions Council as an all-in-one governance framework. The Kit\ncomes with a suite of tools to create and bootstrap DAOs.\n Deployment T emplate:\nSelect, configure, and deploy the smart contracts in a guided walk-through with the deployment template.\n Reference UI:\nMake the creation of your governance portal simple with a fully customizable reference UI built with React,\nTypeScript, and NextJS.\n SDK:\nA TypeScript SDK which interfaces with the Council Protocol smart contracts and unlocks the ability to create\ncustom scripts.\nSupport & Contribute\nBuilding Council has been an absolute pleasure and we couldn't have done it without the feedback and support\nfrom you all. W e're always looking to make Council better , so please let us know how we can continue to improve\nby filing Issues or ask how you can start making PRs and contribute! Check out the contributor guide .", "metadata": {"page_number": 27, "source": "data/delv_council_docs.pdf"}}
{"id": "a67e35763c73", "text": "Governance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 28, "source": "data/delv_council_docs.pdf"}}
{"id": "d10ce0f6cac2", "text": "delvtech /council-kit Public\nShowing runs from all workflows\n2,488 workflow runs\nEvent Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nAll workflows\nFilter workflow runs\nStatus Branch Actor \nAdd changeV aultStatus to SDK (#397)\nDeploy Council UI to GH Pages  #339: Commit 24ad1eb  pushed by ryangoree\n 21 minutes ago   3m 31s main\nAdd changeV aultStatus to SDK\nLint #662: Pull request #397  opened by ryangoree\n 25 minutes ago   3m 17s ryan-change-vault-status\nAdd changeV aultStatus to SDK\nFormat Check  #173: Pull request #397  opened by ryangoree\n 25 minutes ago   2m 9s ryan-change-vault-status\nAdd changeV aultStatus to SDK", "metadata": {"page_number": 29, "source": "data/delv_council_docs.pdf"}}
{"id": "60a8d8c31e3b", "text": "Add changeV aultStatus to SDK\nFormat Check  #173: Pull request #397  opened by ryangoree\n 25 minutes ago   2m 9s ryan-change-vault-status\nAdd changeV aultStatus to SDK\nBuild  #173: Pull request #397  opened by ryangoree\n 25 minutes ago   3m 23s ryan-change-vault-status\nAdd changeV aultStatus to SDK\nDependabot auto-approve  #660: Pull request #397  opened by ryangoree\n 25 minutes ago   2s ryan-change-vault-status\n[SDK] Add set lock duration (#396)\nDeploy Council UI to GH Pages  #338: Commit 272887d  pushed by ryangoree\n 7 hours ago   3m 24s main\n[SDK] Add set lock duration\nDependabot auto-approve  #659: Pull request #396  opened by ryangoree\n 7 hours ago   3s ryan-lock-duration", "metadata": {"page_number": 29, "source": "data/delv_council_docs.pdf"}}
{"id": "129d7ce4f85c", "text": "[SDK] Add set lock duration\nBuild  #172: Pull request #396  opened by ryangoree\n 7 hours ago   4m 2s ryan-lock-duration\n[SDK] Add set lock duration\nLint #661: Pull request #396  opened by ryangoree\n 7 hours ago   2m 48s ryan-lock-duration\n[SDK] Add set lock duration\nFormat Check  #172: Pull request #396  opened by ryangoree\n 7 hours ago   2m 16s ryan-lock-duration\nAdd fallback UI on mobile when no proposals exist (#395)\nDeploy Council UI to GH Pages  #337: Commit 398ac29  pushed by DannyDelott\n 11 hours ago   3m 41s main\nUpdate localhost.ts default config (#394)\nDeploy Council UI to GH Pages  #336: Commit b336b52  pushed by ryangoree\n 12 hours ago   3m 18s main", "metadata": {"page_number": 30, "source": "data/delv_council_docs.pdf"}}
{"id": "676939b2b512", "text": "Update localhost.ts default config (#394)\nDeploy Council UI to GH Pages  #336: Commit b336b52  pushed by ryangoree\n 12 hours ago   3m 18s main\nAdd fallback UI on mobile when no proposals exist\nFormat Check  #171: Pull request #395  opened by DannyDelott\n 12 hours ago   2m 10s danny-fallback-proposals- \u2026\nAdd fallback UI on mobile when no proposals exist\nDependabot auto-approve  #658: Pull request #395  opened by DannyDelott\n 12 hours ago   2s danny-fallback-proposals- \u2026\nAdd fallback UI on mobile when no proposals exist\nBuild  #171: Pull request #395  opened by DannyDelott\n 12 hours ago   3m 35s danny-fallback-proposals- \u2026\nAdd fallback UI on mobile when no proposals exist\nLint #660: Pull request #395  opened by DannyDelott", "metadata": {"page_number": 30, "source": "data/delv_council_docs.pdf"}}
{"id": "f5aa1abc63cb", "text": "12 hours ago   3m 35s danny-fallback-proposals- \u2026\nAdd fallback UI on mobile when no proposals exist\nLint #660: Pull request #395  opened by DannyDelott\n 12 hours ago   2m 40s danny-fallback-proposals- \u2026\nUpdate localhost.ts default config\nFormat Check  #170: Pull request #394  opened by ryangoree\n 12 hours ago   2m 0s ryangoree-patch-1\nUpdate localhost.ts default config\nLint #659: Pull request #394  opened by ryangoree\n 12 hours ago   3m 7s ryangoree-patch-1", "metadata": {"page_number": 30, "source": "data/delv_council_docs.pdf"}}
{"id": "e27ae4506973", "text": "Previous  1 \u2026 100  NextUpdate localhost.ts default config\nDependabot auto-approve  #657: Pull request #394  opened by ryangoree\n 12 hours ago   2s ryangoree-patch-1\nUpdate localhost.ts default config\nBuild  #170: Pull request #394  opened by ryangoree\n 12 hours ago   3m 23s ryangoree-patch-1\n[CLI] Fix voting power errors on localhost due to stale block lag (#393)\nDeploy Council UI to GH Pages  #335: Commit e21230b  pushed by ryangoree\n 2 days ago   1h 8m 25s main\n[CLI] Fix voting power errors on localhost due to stale block lag\nBuild  #169: Pull request #393  synchronize by ryangoree\n 2 days ago   3m 29s ryan-testnet-accounts\n[CLI] Fix voting power errors on localhost due to stale block lag", "metadata": {"page_number": 31, "source": "data/delv_council_docs.pdf"}}
{"id": "f9f81d32498b", "text": "Build  #169: Pull request #393  synchronize by ryangoree\n 2 days ago   3m 29s ryan-testnet-accounts\n[CLI] Fix voting power errors on localhost due to stale block lag\nDependabot auto-approve  #656: Pull request #393  synchronize by ryangoree\n 2 days ago   2s ryan-testnet-accounts\n[CLI] Fix voting power errors on localhost due to stale block lag\nFormat Check  #169: Pull request #393  synchronize by ryangoree\n 2 days ago   2m 32s ryan-testnet-accounts\n[CLI] Fix voting power errors on localhost due to stale block lag\nLint #658: Pull request #393  synchronize by ryangoree\n 2 days ago   2m 50s ryan-testnet-accounts", "metadata": {"page_number": 31, "source": "data/delv_council_docs.pdf"}}
{"id": "1421f03f8b13", "text": "delvtech /council-kit Public\nCore V oting Contract\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: CoreV oting.sol\nType/Category: Governance\nContract Source: https://github.com/element-fi/council/blob/main/contracts/CoreV oting.sol\n1. Introduction (Summary)\nThe core voting contract allows a voting process for those who have been allocated governance power . It allows\nthem to select which calls are executed from the core voting contract address and does not make assumptions\nabout how the voting power is allocated. Instead, it calls designated contracts that calculate how much voting\npower a user has for the voting contract. Calls can be executed at a variety of dif ferent security thresholds for\nvarious dif ferent external functionalities. The contracts which calculate votes for the core voting contract are called", "metadata": {"page_number": 32, "source": "data/delv_council_docs.pdf"}}
{"id": "75de1548b632", "text": "power a user has for the voting contract. Calls can be executed at a variety of dif ferent security thresholds for\nvarious dif ferent external functionalities. The contracts which calculate votes for the core voting contract are called\nvoting vaults, and the sum of what they indicate for a user at a timestamp is that user's voting power .\n2. Contract Details\nThe core voting allows the proposal of a package of calls to be made from the core voting contract. Each of these\ncalls corresponds to some action on the Ethereum blockchain. Each proposal must be proposed by either an\nauthorized user [Governance steering council] or by someone with suf ficient voting power . Then, each of the users\nwho have voting power can cast a vote for , against, or neutral on each proposal. If the proposal gains more votes\nthan a security threshold, the proposal can then be executed after some minimum time, and before an expiration\ntime. An authorized address can change all parameters of the voting contract. In a normal operation, that address is", "metadata": {"page_number": 32, "source": "data/delv_council_docs.pdf"}}
{"id": "1c8a77965884", "text": "than a security threshold, the proposal can then be executed after some minimum time, and before an expiration\ntime. An authorized address can change all parameters of the voting contract. In a normal operation, that address is\nthe timelock contract. The core voting contract stores a mapping containing previous proposals organized\naccording to an id associated with each proposal, timelock address, minimum and maximum voting times. Also, the\nminimum power needed to propose a vote, a mapping that records custom quorums, a default quorum, and a listing\nof approved voting vaults.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 32, "source": "data/delv_council_docs.pdf"}}
{"id": "e9322ff73f83", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides3. Key Mechanisms & Concepts\nThe voting contract accepts in calldata a list of vaults in which the user may have voting power to calculate the\nvoting power for a user , the core voting contract then checks that each vault in the list is approved, and calls them\nwith the sender's address, timestamp, and optional extra data. The voting vault responds with a number of votes\nallocated to the user . To create a proposal the creator's voting power is checked and then the proposal is created\nby assigning the last unused proposal id to the new proposal, and storing its data into the proposals mapping. After\nthe proposal is created, a user can vote on a proposal by indicating the proposal id they would like to vote on. Then,\ntheir voting power is calculated, and added to a running tally of the votes for yes, no, or abstain. V otes cannot be", "metadata": {"page_number": 33, "source": "data/delv_council_docs.pdf"}}
{"id": "727caebadb8e", "text": "the proposal is created, a user can vote on a proposal by indicating the proposal id they would like to vote on. Then,\ntheir voting power is calculated, and added to a running tally of the votes for yes, no, or abstain. V otes cannot be\nmade on a proposal after a max time from proposal creation. If a proposal has more votes cast than the quorum\nthreshold for the action/s being taken, and more yes votes than no votes, then the proposal can be executed.\nProposal execution will fail if the proposal is past an expiration timestamp.\n4. Gotchas (Potential source of user error)\nVotes can be changed or removed by calling the vote function again, with a new ballot to change them, or with\nan empty set of voting vaults to remove them.\nAll actions in a proposal must succeed or the execution of that proposal will revert. Therefore, any proposal\nmust be created without any calls that have a high probability to revert.", "metadata": {"page_number": 33, "source": "data/delv_council_docs.pdf"}}
{"id": "6088f78b9e92", "text": "an empty set of voting vaults to remove them.\nAll actions in a proposal must succeed or the execution of that proposal will revert. Therefore, any proposal\nmust be created without any calls that have a high probability to revert.\nAnyone can execute the transactions approved by the governance system, therefore, any bundle of\ntransactions made should be vetted to not have exploitable downstream ef fects if sandwiched by an adversary .\nThe quorum of a bundle of onchain actions is set as the maximum in that bundle, meaning that it should be\nvetted if the quorum is lowered. For an action it should be secure even if called multiple times in the same\ntransactions or with other low quorum actions.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nSince the voting contract can change its own configuration it can put itself into a position where it is no longer\nfunctional by making improper changes to its own variables. There is no recovery mechanism for this format of", "metadata": {"page_number": 33, "source": "data/delv_council_docs.pdf"}}
{"id": "44687dc0f219", "text": "Factors)\nSince the voting contract can change its own configuration it can put itself into a position where it is no longer\nfunctional by making improper changes to its own variables. There is no recovery mechanism for this format of\nbricking so the governance contract variable upgrades must be held to the highest security standards.\nThe modular nature of the governance systems is designed to enable upgradeability . In the case of a\ncomponent like a voting vault fails, it should be voted on to be removed from the governance contract. In a\ncase where the core voting contract is out of date, it can change the core voting contract in the time lock and\nother permissioned contracts to replace itself.", "metadata": {"page_number": 33, "source": "data/delv_council_docs.pdf"}}
{"id": "d441ccef90ab", "text": "Getting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender", "metadata": {"page_number": 34, "source": "data/delv_council_docs.pdf"}}
{"id": "c908d6760ac7", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 34, "source": "data/delv_council_docs.pdf"}}
{"id": "fbddfcc6bd58", "text": "delvtech /council-kit Public\nCouncil Deployment Guide\nJump to bottom\nWilliam V illanueva edited this page on Mar 28  \u00b7 6 revisions\nIf you're interested in learning how to deploy your own version of the Council governance contracts on the\nblockchain, you've come to the right place.\nThrough this guide you will learn how to do the following:\n1. Set up the Council deployment scripts\n2. Adjust Council to suit your DAO's needs\n3. Deploy the Council contracts to the blockchain\nThe Council Kit includes apps and packages that will help you with various tasks around the deployment and usage\nof the Council governance framework. This guide will focus on how to use the council-deploy package to deploy\nthe Council contracts onto the blockchain.\nRequirements\nGit\nNode 14+\nYarn package manager\nEtherscan API Key\nNode provider URI and API Key (e.g. Alchemy)", "metadata": {"page_number": 35, "source": "data/delv_council_docs.pdf"}}
{"id": "4b427ae00f66", "text": "the Council contracts onto the blockchain.\nRequirements\nGit\nNode 14+\nYarn package manager\nEtherscan API Key\nNode provider URI and API Key (e.g. Alchemy)\nPrivate Key for an Ethereum address to deploy the contracts\nClone the council-kit repository\nThe first step is just getting the code . We'll do that by using git to clone the repository from GitHub, so open up\nyour preferred command line terminal and run the following command:\nNOTE  If you want to make some changes to the codebase and/or eventually deploy your own flavor of the\nCouncil Reference UI, you'll probably want to fork the repo on GitHub and clone your fork insteadCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\ngit clone git@github.com:element-fi/council-kit.git", "metadata": {"page_number": 35, "source": "data/delv_council_docs.pdf"}}
{"id": "56ce508c9996", "text": "If you take a look at the directory structure, you'll find that this guide will focus on the packages/council-deploy\npackage.\nFetch Contract Code and Install Dependencies\nRun the following command on the root directory council-kit to install the required dependencies:\nSince we're deploying contracts onto the blockchain, and using the Etherscan API to verify them, we also need to\nfetch the contract code with the following command:\nNow we can build the project's packages:\nFinally , don't forget to create a packages/council-deploy/.env file and add your environment variables, namely\nthe Alchemy and Etherscan API keys, and the deployer address private key . You can just use the\npackages/council-deploy/.env.sample file as a template.\nCustomizing Council\nIf you've followed the guide up to this point, you can already deploy a default version of Council by using the", "metadata": {"page_number": 36, "source": "data/delv_council_docs.pdf"}}
{"id": "c591ae2cec5e", "text": "packages/council-deploy/.env.sample file as a template.\nCustomizing Council\nIf you've followed the guide up to this point, you can already deploy a default version of Council by using the\npackages/council-deploy/src/deployCouncil.ts script (just jump to the Deploying Council Contracts  section)\nHowever , chances are that you'll need to make some configuration adjustments to the script for this Council\ndeployment to fit your DAO's structure and needs, such as:\nWill the DAO use a Governance Token? If so, does it already have one on the blockchain?\nWill the DAO use a Governance Steering Council ?\nDoes the DAO have an existing Treasury contract?\nWhich V oting V aults will the DAO use?\nThe Council Kit provides a default implementation for all of these situations. This section will explore some of these\nconfiguration options.\nCustomizing: Governance T oken", "metadata": {"page_number": 36, "source": "data/delv_council_docs.pdf"}}
{"id": "76146df4e090", "text": "Which V oting V aults will the DAO use?\nThe Council Kit provides a default implementation for all of these situations. This section will explore some of these\nconfiguration options.\nCustomizing: Governance T oken\nThe first few lines of the deployCouncil.ts script execute the deployment of a standard ERC20 token contract\nwith the given token name and symbol, to be used for Governance through Council:yarn install\nyarn workspace @council/deploy run load-contracts\nyarn build", "metadata": {"page_number": 36, "source": "data/delv_council_docs.pdf"}}
{"id": "7bed1b3179de", "text": "Scenario 1: The DAO doesn't have a Governance T oken, but wants to use one\nIn this case, just change the tokenName and tokenSymbol parameters into the DAO's preferred values for their\nGovernance Token. Council's deployment script will handle the token contract's deployment and verification.\nScenario 2: The DAO already has a Governance T oken, or wants to use a custom one\nIf the DAO already has its own Governance token, you can skip this token deployment by removing (or commenting\nout) the aforementioned lines of code.\nYou'll also have to adjust the code that depends on the votingT oken address, namely the Locking vault and V esting\nvault deployments. To do that, change the lines:\ninto your Governance token address. For example:\nIn this example, we've set the votingT okenAddress to Element's ELFI contract, whose address is", "metadata": {"page_number": 37, "source": "data/delv_council_docs.pdf"}}
{"id": "3e096eb20df6", "text": "vault deployments. To do that, change the lines:\ninto your Governance token address. For example:\nIn this example, we've set the votingT okenAddress to Element's ELFI contract, whose address is\n0x5c6D51ecBA4D8E4F20373e3ce96a62342B125D6d\nCustomizing: The Governance Steering Council (GSC)\nThe next few lines of code in the deployCouncil.ts script handle the deployment of the GSC Core V oting\ncontract, which gives the Governance Steering Council  its privileged permissions:// The voting token is used to determine voting power in the Locking Vault and\n// Vesting Vault. It has no dependencies on any of the council contracts.\nconst votingToken = await deployVotingToken({\n    tokenName: \"Council Voting Token\",\n    tokenSymbol: \"CVT\",\n    signer,\n});", "metadata": {"page_number": 37, "source": "data/delv_council_docs.pdf"}}
{"id": "7b4678f99ed1", "text": "const votingToken = await deployVotingToken({\n    tokenName: \"Council Voting Token\",\n    tokenSymbol: \"CVT\",\n    signer,\n});\nvotingTokenAddress: votingToken.address\nvotingTokenAddress: \"0x5c6D51ecBA4D8E4F20373e3ce96a62342B125D6d\"\n// The GSC Core Voting is a privileged voting contract\n...\nconst gscCoreVoting = await deployGSCCoreVoting({\n  signer,\n  ...\n    votingVaultAddresses: [],\n  ...\n    ownerAddress: signer.address, // temporary assignment\n  ...\n  baseQuorum: \"1\",\n  lockDuration: 10,", "metadata": {"page_number": 37, "source": "data/delv_council_docs.pdf"}}
{"id": "f2c6da819ec5", "text": "It also uses a gscV ault to keep track of voting power:\nScenario 1: The DAO wants to have a GSC\nIn this case, you'll just want to adjust the parameters that control the GSC's privileges in the respective\ngscCoreV oting and gscV ault contracts:\ngscCoreV oting:\nbaseQuorum: Controls how many GSC members are needed to pass a proposal. Default value is 1.\nlockDuration: Controls how many blocks to wait from creation time before a proposal can be executed\n(provided it has reached quorum and is passing). For reference, 1 week is around 300,000 blocks.\nextraVotingTime: Controls how long to wait from unlocking time (see lockDuration) before a proposal is\nclosed for voting.\ngscV ault:\nvotingPowerBound: How much voting power a user needs to be able to join the GSC. This value should be", "metadata": {"page_number": 38, "source": "data/delv_council_docs.pdf"}}
{"id": "ad25f96947f0", "text": "closed for voting.\ngscV ault:\nvotingPowerBound: How much voting power a user needs to be able to join the GSC. This value should be\nset according to the DAO's token supply plan.\nidleDuration: This is the amount of time a new member of the GSC must wait before they can do anything\nas a GSC member .\nScenario 2: The DAO doesn't need a GSC\nIn this case, you can skip deployment of the gscCoreV oting contract and the gscV ault contract:\nAdjust references to gscCoreV oting by setting them to the 0x00 address:  extraVotingTime: 15,\n});\nconst gscVault = await deployGSCVault({\n  signer,\n  ownerAddress: timelock.address,\n  // GSC vault depends on core voting contract to prove that members meet the", "metadata": {"page_number": 38, "source": "data/delv_council_docs.pdf"}}
{"id": "fd5555d0a47a", "text": "const gscVault = await deployGSCVault({\n  signer,\n  ownerAddress: timelock.address,\n  // GSC vault depends on core voting contract to prove that members meet the\n  // voting power minimum to be on the GSC.\n  coreVotingAddress: coreVoting.address,\n  // any test account can get onto GSC with this much vote power\n  votingPowerBound: \"100\",\n  // members are idle for 60 seconds after they join the GSC\n  idleDuration: 60,\n});\nconst timelock = await deployTimelock({\n...\n  gscCoreVotingAddress: \"0x0000000000000000000000000000000000000000\"\n...", "metadata": {"page_number": 38, "source": "data/delv_council_docs.pdf"}}
{"id": "b9bddc4719bd", "text": "Remove the following code, which updates some parameters on the gscCoreV oting contract:\nWith that, your deployment will not include any functionality related to the GSC.\nCustomization: The CoreV oting Contract\nbaseQuorum: Controls how much voting power is needed for a proposal to pass. This value should be set\naccording to the DAO's token supply plan.\nminProposalPower: Controls how much voting power is needed to create a proposal. This value should be\nset according to the DAO's token supply plan.\nlockDuration: Controls how many blocks to wait from creation time before a proposal can be executed\n(provided it has reached quorum and is passing). For reference, 1 week is around 300,000 blocks.\nextraVotingTime: Controls how long to wait from unlocking time (see lockDuration) before a proposal is\nclosed for voting.\nCustomization: The T imelock Contract", "metadata": {"page_number": 39, "source": "data/delv_council_docs.pdf"}}
{"id": "a7131bec0e14", "text": "extraVotingTime: Controls how long to wait from unlocking time (see lockDuration) before a proposal is\nclosed for voting.\nCustomization: The T imelock Contract\nwaitTimeInBlocks: This is the amount of blocks that you have to wait before a call can be executed by the\nTimelock.\ngscCoreVotingAddress: The GSC has a special permission to increase the time that a proposal must wait\nbefore it can be executed. This is a security feature. If your deployment does not include a GSC, you should\nset this to the 0x00 address.\nThe Timelock contract is where proposals get executed. It is owned by the CoreV oting Contract. This way ,\nproposals can register calls on the timelock.\nAt the same time, the Timelock contract owns the CoreV oting contract. As such, the only way to upgrade the\nCoreV oting contract is through a proposal which gets executed through the timelock.", "metadata": {"page_number": 39, "source": "data/delv_council_docs.pdf"}}
{"id": "e0cad76acc89", "text": "proposals can register calls on the timelock.\nAt the same time, the Timelock contract owns the CoreV oting contract. As such, the only way to upgrade the\nCoreV oting contract is through a proposal which gets executed through the timelock.\nCustomization: The T reasury Contract\nIf the DAO does not have a treasury contract they want to use with Council, the script will deploy a treasury\ncontract.const coreVoting = await deployCoreVoting({\n...\n  gscCoreVotingAddress: \"0x0000000000000000000000000000000000000000\"\n...\nawait gscCoreVoting.contract.changeVaultStatus(gscVault.address, true);\nconsole.log(\"Approved GSCVault on GSCCoreVoting\");\n// Now we transfer ownership to the Timelock, any future upgrades to", "metadata": {"page_number": 39, "source": "data/delv_council_docs.pdf"}}
{"id": "fd382aea9fb8", "text": "console.log(\"Approved GSCVault on GSCCoreVoting\");\n// Now we transfer ownership to the Timelock, any future upgrades to\n// GSCCoreVoting must go through the normal proposal flow.\nawait gscCoreVoting.contract.setOwner(timelock.address);\nconsole.log(\"Set owner of GSCCoreVoting to Timelock\");", "metadata": {"page_number": 39, "source": "data/delv_council_docs.pdf"}}
{"id": "45d79146f39c", "text": "However , if the DAO does have its own treasury contract, it doesn't need to deploy a new one, so you can just\nremove the following code:\nIt is recommended that Council's timelock contract should be the owner of the Treasury contract, so that any usage\nof the treasury must go through the proposal process.\nCustomization: V oting V aults\nThe Council Kit includes two default vault implementations: the Locking vault and the V esting vault. They both\nrequire the use of a Governance Token or V oting Token. If the DAO already has its own Governance Token that\nthey'd like to use with Council, make sure to update both vault deployments with the token's contract address by\nchanging:\ninto your Governance token address. For example:\nIn this example, we've set the votingT okenAddress to Element's ELFI contract, whose address is", "metadata": {"page_number": 40, "source": "data/delv_council_docs.pdf"}}
{"id": "85e635e46bad", "text": "changing:\ninto your Governance token address. For example:\nIn this example, we've set the votingT okenAddress to Element's ELFI contract, whose address is\n0x5c6D51ecBA4D8E4F20373e3ce96a62342B125D6d\nThe V esting V ault gives voting power to tokens that are still being vested, but applies a multiplier to the unvested\ntokens, which allows the DAO to reduce their voting power . This multiplier can be set in the packages/council-\ndeploy/src/vaults/deployVestingVault.ts file, by adding a line to set this value before the timelock address is\nset:\nIn this example, the line await vestingVault.changeUnvestedMultiplier(10) sets the multiplier to 10%, so", "metadata": {"page_number": 40, "source": "data/delv_council_docs.pdf"}}
{"id": "307456cc36cd", "text": "set:\nIn this example, the line await vestingVault.changeUnvestedMultiplier(10) sets the multiplier to 10%, so\nvested tokens will have 0.10 as much voting power as unvested tokens.const treasury = await deployTreasury({\n  signer,\n  ownerAddress: timelock.address,\n});\nvotingTokenAddress: votingToken.address\nvotingTokenAddress: \"0x5c6D51ecBA4D8E4F20373e3ce96a62342B125D6d\"\nawait vestingVault.initialize(signer.address, signer.address);\n// Set the initial unvestedMultiplier value\nawait vestingVault.changeUnvestedMultiplier(10)\n// Only the Timelock can update things like the unvestedMultiplier.", "metadata": {"page_number": 40, "source": "data/delv_council_docs.pdf"}}
{"id": "7cdc50e56903", "text": "// Set the initial unvestedMultiplier value\nawait vestingVault.changeUnvestedMultiplier(10)\n// Only the Timelock can update things like the unvestedMultiplier.\nawait vestingVault.setTimelock(timelockAddress);", "metadata": {"page_number": 40, "source": "data/delv_council_docs.pdf"}}
{"id": "68ee396a2928", "text": "Deploying the Council Contracts\nContracts are deployed using the private key of the wallet specified in the .env file, see:\nGOERLI_DEPLOYER_PRIVATE_KEY.\nOnce all contracts are deployed, each one will be verified on Etherscan automatically . (Don't forget to add your\nETHERSCAN_API_KEY to the .env file.)\nThe entire process takes around 10 minutes. This is because some contracts need to interact with other contracts.\nIt also takes a little extra time for Etherscan to index new contracts before they can be verified.\nGoerli: Run the following command:\nMainnet:\nThis will run the deployCouncil.ts script to deploy all the included contracts:\nAnd with that, you're done. All the required contracts are now deployed on the blockchain, so once you've\ndistributed some tokens, you can start doing some Governance.\nYou'll find that running the script generated a packages/council-", "metadata": {"page_number": 41, "source": "data/delv_council_docs.pdf"}}
{"id": "ed24f068602d", "text": "And with that, you're done. All the required contracts are now deployed on the blockchain, so once you've\ndistributed some tokens, you can start doing some Governance.\nYou'll find that running the script generated a packages/council-\ndeploy/src/deployments/goerli.deployments.json file which contains data about all the contracts that were\ndeployed, should you need it for future reference.yarn workspace @council/deploy run goerli:deploy-contracts\nyarn workspace @council/deploy run mainnet:deploy-contracts", "metadata": {"page_number": 41, "source": "data/delv_council_docs.pdf"}}
{"id": "c6a57a03bb38", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 42, "source": "data/delv_council_docs.pdf"}}
{"id": "1dfa304f40d6", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit ReportsThe next step would be to create a web UI to interact with the Council contracts. Luckily , the Council Kit includes a\nReference UI, so you can follow the Reference UI Deployment Guide  to get started!", "metadata": {"page_number": 42, "source": "data/delv_council_docs.pdf"}}
{"id": "ed2841d1ec93", "text": "Clone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 43, "source": "data/delv_council_docs.pdf"}}
{"id": "9a19cf7c5004", "text": "delvtech /council-kit Public\nCouncil Glossary\nJump to bottom\nAlim edited this page on Mar 14  \u00b7 13 revisions\nVoting\nVoting Power:\nThe basic unit of governance power used for voting on proposals, which determines whether proposals pass or fail.\nGovernance participants hold V oting Power , which they can then delegate for it to be usable in governance.\nDelegation:\nGovernance participants can delegate their voting power/voting rights to an address. Delegation can be given to\none address at a time, including the holder \u2019s own address. Note that delegation does not lock tokens; it simply adds\nvotes to the chosen delegate address. This allows token holders' votes to be used in governance through their\ndelegates, which reduces both the financial and mental cost of participating in governance for individual holders.\nProposal:\nFormal request to make a change on how any part of the protocol works. This can include, but is not limited to:", "metadata": {"page_number": 44, "source": "data/delv_council_docs.pdf"}}
{"id": "48472f855933", "text": "delegates, which reduces both the financial and mental cost of participating in governance for individual holders.\nProposal:\nFormal request to make a change on how any part of the protocol works. This can include, but is not limited to:\nadding, deleting or updating smart contract code, changing the protocol's stated mission or vision, defining how to\nspend treasury assets, executing any kind of on-chain transaction, changing governance processes and\nparameters, among others. Users will decide on whether a proposal passes or fails by using their V oting Power .\nProposal types may include Protocol (Executable) Proposals and DAO (Social) Proposals, but the specific proposal\ntypes depend on the governance framework defined by the DAO.\nVoting on Protocol Proposals:\nUsers can vote for or against single proposals once they have voting rights delegated to their wallet address. V otes\ncan be cast while a proposal is in the \u201cActive\u201d state; the proposal may be queued in the Timelock.\nGovernance Steering Council (GSC):", "metadata": {"page_number": 44, "source": "data/delv_council_docs.pdf"}}
{"id": "b2367f5fe65a", "text": "can be cast while a proposal is in the \u201cActive\u201d state; the proposal may be queued in the Timelock.\nGovernance Steering Council (GSC):\nGroup of delegates who have surpassed a pre-established threshold of delegated V oting Power (by the DAO) and\nhave claimed this governance role. The GSC holds additional governance powers, as well as the additional\nresponsibilities that come with them. The extent of the GSC's functions and permissions is to be decided by the\nDAO through a governance proposal. If a GSC member \u2019s delegated voting power falls below the DAO-defined\nmember threshold, any delegate can \u201ckick\u201d them from the GSC at which point they will lose their additional powers.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 44, "source": "data/delv_council_docs.pdf"}}
{"id": "b5f1f4c77900", "text": "Quorum:\nMinimum amount of votes required for a proposal's voting results to be considered valid. The purpose of this\nquorum is to ensure that the only measures that pass have adequate voter participation. More specifically , for a\nproposal to succeed, a minimum amount of voting power (defined by the DAO) must participate in the vote. The\nquorum value may change as governance begins to understand participation rates but all changes to quorum\nrequirements must be ratified by the governance community .\nVoting Period (Off-chain polling):\nThe total voting period in which votes can be cast on an of f-chain polling platform (e.g. Snapshot), if the DAO has\nchosen to include an of f-chain polling step in their governance framework before moving proposals to an on-chain\nvote.\nVoting Period (On-chain):\nThe total voting period in which votes can be cast. [Minimum voting period][extra voting period] is the layout of the", "metadata": {"page_number": 45, "source": "data/delv_council_docs.pdf"}}
{"id": "052b2f2bf629", "text": "vote.\nVoting Period (On-chain):\nThe total voting period in which votes can be cast. [Minimum voting period][extra voting period] is the layout of the\ntotal time for voting. On-chain proposals have a voting period that is to be defined by the DAO.\nTimelock:\nThe timelock is a speed bump for calls (i.e., the smart contract code to be executed if the proposal passes). It\nrequires calls to wait for a period before they can be executed. After a call is registered, the call can be removed\nduring the waiting period, and an authorized address can extend the waiting period only once.\nVoting V aults\nVoting V aults:\nSet of smart contracts that determine how voting power is counted in the system. Each voting vault can be\nprogrammed to measure any metric to distribute voting power . For example, one voting vault could assign 1 vote\nper token deposited, another one could assign 0.05 votes per token vested, while another could assign 1000 votes", "metadata": {"page_number": 45, "source": "data/delv_council_docs.pdf"}}
{"id": "b7aab60d1c6b", "text": "programmed to measure any metric to distribute voting power . For example, one voting vault could assign 1 vote\nper token deposited, another one could assign 0.05 votes per token vested, while another could assign 1000 votes\nper successful governance proposal submitted by a user . This gives the system enough flexibility to evolve\nalongside the needs of the DAO.\nVoting V aults provide the ability to assign voting power to specific types of tokens/positions. The result is beautiful\n\u2014 governance users can maximize capital ef ficiency while maintaining the ability to delegate or vote when the time\ncomes. V oting vaults are designed to be upgraded, allowing for voting vault logic to be updated by governance and\nto avoid the pains that come with governance upgrade migrations.\nThe creation of a voting vault begins with defining a strategy for counting votes / providing voting power . Once the\nlogic has been established, governance will vote to approve the method, and if successful, the integration can be\ncompleted, following which users can start voting.\nLocking V ault:", "metadata": {"page_number": 45, "source": "data/delv_council_docs.pdf"}}
{"id": "a4e8b310a77b", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultThe locking vault allows users to deposit their tokens into a contract in exchange for voting power , which can also", "metadata": {"page_number": 46, "source": "data/delv_council_docs.pdf"}}
{"id": "bde8e09b7805", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultThe locking vault allows users to deposit their tokens into a contract in exchange for voting power , which can also\nbe delegated to a dif ferent user . The vault tracks the historical voting power of each address and, when asked for\nvoting power , searches the historical record of that address\u2019  voting power at the time when the vote was proposed.\nVesting V ault:\nThe vesting vault has the same functionality that the locking vault has, but for vesting. This vault allows locked /\nvesting positions to still have voting power in the governance system and does so by using a defined multiplier for\nthe vested tokens over unvested. For example, vested tokens could count for 0.05 votes each while unvested\ntokens count for 1 vote each.\nGovernance Steering Council (GSC) V ault:", "metadata": {"page_number": 46, "source": "data/delv_council_docs.pdf"}}
{"id": "d3805b90bb1c", "text": "the vested tokens over unvested. For example, vested tokens could count for 0.05 votes each while unvested\ntokens count for 1 vote each.\nGovernance Steering Council (GSC) V ault:\nThe GSC vault enables a mode of governance that is distinct from other voting vaults. It gives one vote to each\nmember of the Council. When attached to a core voting contract, it enables the council members to vote on\nproposals and execute them only with agreement from the Council. The Council is selected by a continuous\nelection of governance power in another core voting system.", "metadata": {"page_number": 46, "source": "data/delv_council_docs.pdf"}}
{"id": "b1ae86967cda", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 47, "source": "data/delv_council_docs.pdf"}}
{"id": "9af947b0f459", "text": "delvtech /council-kit Public\nA suite of tools for building on top of the Council Protocol smart contracts: https://github.com/delvtech/council\ncouncil.delv .tech\n AGPL-3.0 license\n 26 stars  18 forks\nView code\nCouncil-Kit\nCouncil kit is the complete toolkit for scaf folding your own DAO using the council protocol. This repository\nis designed to be forkable for your own council protocol variant.\n Star Notifications\nCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\n main  \n 388\n Failed to load latest commit information.\nREADME.md", "metadata": {"page_number": 48, "source": "data/delv_council_docs.pdf"}}
{"id": "f3c867e35816", "text": "Get started with the Docs .\nRequires Node 14+.\nWhat's inside?\nThis monorepo uses Yarn as a package manager . It includes the following packages/apps:\nApps\nName Description\ncouncil-ui A reference user interface built with NextJS and using the SDK.\ncouncil-sdk-starter A boilerplate TypeScript project that uses the SDK.\nPackages\nName Description\ncouncil-sdk A TypeScript SDK for interfacing with the Council protocol.\ncouncil-deploy A template for deploying council contracts on Goerli.\ncouncil-typechain Type classes generated from the council protocol contracts using Typechain.\nUtility Packages\nName Description\neslint-config Package for static type checking.\nprettier-config Package for code formatting.\ntsconfig Package for TypeScript configuation.\nEach package/app is 100% TypeScript .", "metadata": {"page_number": 49, "source": "data/delv_council_docs.pdf"}}
{"id": "4e27a393dc24", "text": "eslint-config Package for static type checking.\nprettier-config Package for code formatting.\ntsconfig Package for TypeScript configuation.\nEach package/app is 100% TypeScript .\nMonorepo commands\nBuild\nTo build all apps and packages, run the following command:\nyarn build\n# build only packages (useful for app development)\nyarn build:packages", "metadata": {"page_number": 49, "source": "data/delv_council_docs.pdf"}}
{"id": "371c09432879", "text": "Develop\nTo run the development server for all apps, run the following command:\nLinting\nTo run linting on all apps and packages, run the following command:\nFormatting\nTo run formatting on all apps and packages, run the following command:\nDevelopment\n1. Clone the repo: git clone git@github.com:delvtech/council-kit.git\n2. Run yarn at the top-level to install all packages across every workspace\nInstalling new packages\nHere are a few examples of how to install packages in this repo:\nInstalling a workspace package\nTo install a project from the packages/ directory as a dependency , copy it directly into your app\npackage.json like this, then run yarn.yarn dev\nyarn lint\nyarn format:check\n# write formatting changes to files\nyarn format", "metadata": {"page_number": 50, "source": "data/delv_council_docs.pdf"}}
{"id": "f6b38056dc99", "text": "package.json like this, then run yarn.yarn dev\nyarn lint\nyarn format:check\n# write formatting changes to files\nyarn format\n# Install prettier for the top-level package.json, useful for tooling that\n# runs against the entire monorepo\nyarn add prettier\n# Install lodash for the packages/council-sdk workspace.\n# Note: specify the workspace by the name in its `package.json`, ie: `@council/sdk` not `co\nyarn workspace @council/sdk add lodash\n{\n  \"dependencies\": {", "metadata": {"page_number": 50, "source": "data/delv_council_docs.pdf"}}
{"id": "5ebe22eb04af", "text": "Running workspace scripts\nTo run scripts in workspaces, use the following command:\nExample\nTurborepo\nThis package uses the turborepo  monorepo framework. Turborepo provides additional features compared\nto a plain monorepo such as local/remote command caching and parallel npm script execution.\nRemote Caching\nTurborepo can use a technique known as Remote Caching  to share cache artifacts across machines,\nenabling you to share build caches with your team and CI/CD pipelines.\nBy default, Turborepo will cache locally . To enable Remote Caching you will need an account with V ercel.\nIf you don't have an account you can create one , then enter the following commands:\nThis will authenticate the Turborepo CLI with your Vercel account .\nNext, you can link your Turborepo to your Remote Cache by running the following command from the root\nof your turborepo:\nResources", "metadata": {"page_number": 51, "source": "data/delv_council_docs.pdf"}}
{"id": "59a63dfd67ca", "text": "This will authenticate the Turborepo CLI with your Vercel account .\nNext, you can link your Turborepo to your Remote Cache by running the following command from the root\nof your turborepo:\nResources\nLearn more about the power of Turborepo:\nPipelines\nCaching    \"@council/sdk\": \"*\",\n    \"@council/typechain\": \"*\"\n  }\n}\nyarn workspace <workspace-name> <package.json script>\nyarn workspace council-ui start\ncd my-turborepo\nnpx turbo login\nnpx turbo link", "metadata": {"page_number": 51, "source": "data/delv_council_docs.pdf"}}
{"id": "6872ee967190", "text": "Remote Caching\nScoped Tasks\nConfiguration Options\nCLI Usage\nReleases\nNo releases published\nPackages\nNo packages published\nContributors 9\nLanguages\nTypeScript 93.2%  Solidity 6.3%  Other 0.5%", "metadata": {"page_number": 52, "source": "data/delv_council_docs.pdf"}}
{"id": "7baf1b91a53e", "text": "delvtech /council-kit Public\nCouncil Protocol 101\nJump to bottom\nAlim edited this page on Mar 8  \u00b7 8 revisions\nThe current state of most on-chain governance is often a monolithic contract with little room for adaptability ,\ncustomization, or scalability .\nMost on-chain contracts require large transaction and audit costs. Monolithic on-chain contracts also create\nsignificant friction in conducting routine operations. Each transaction, update, or change to the core protocols\nrequires the consensus of the entire DAO, leading to governance fatigue, slow-moving operations, and overall\ninefficiencies.\nConsequently , DAO governance has skewed heavily towards hybrid governance, which foregoes on-chain\nexecution in favor of of f-chain signaling tools such as Snapshot. DAOs employing this model typically verify the\nchain's status to endow voting power . Once consensus is achieved, they often depend upon trusted community", "metadata": {"page_number": 53, "source": "data/delv_council_docs.pdf"}}
{"id": "7f1d2b95239c", "text": "execution in favor of of f-chain signaling tools such as Snapshot. DAOs employing this model typically verify the\nchain's status to endow voting power . Once consensus is achieved, they often depend upon trusted community\nmembers to manually execute those decisions using multisigs, introducing a single point of failure for operations\nand a potential security risk.\nThe Council Protocol introduces a new governance system that allows for improvements, flexibility , and\nexperimentation while successfully maintaining the security and robustness of the Protocol. It entails a set of\nfoundational contracts designed with modularity in mind. Modular governance frameworks allow for customization,\nenabling DAOs to add and remove modules based on their evolutionary needs. It empowers decentralized\ngovernance by leveraging:\nVoting power delegation (i.e. a refined form of representative democracy)\nCapital-ef ficient voting via a novel governance primitive called V oting V aults\nA community entrusted Governance Steering Council (GSC)", "metadata": {"page_number": 53, "source": "data/delv_council_docs.pdf"}}
{"id": "81a602cb740e", "text": "governance by leveraging:\nVoting power delegation (i.e. a refined form of representative democracy)\nCapital-ef ficient voting via a novel governance primitive called V oting V aults\nA community entrusted Governance Steering Council (GSC)\nCore voting and delegation of voting power provide basic functionality for the governance system while voting\nvaults allow the governance ecosystem to be more inclusive and give governance participants a capital ef ficient\nway to be active in protocol governance without sacrificing yield opportunities across DeFi. Delegation, V oting\nVaults and the GSC will be explained in more detail later in this guide.\nCore V oting\nCentral to the Council Protocol is the Core V oting Contract . The Core V oting Contract defines voting power , tracks\nproposals, and measures voting power prior to the execution of any proposal. It also allows various contract\nparameters to be configured:Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 53, "source": "data/delv_council_docs.pdf"}}
{"id": "f5ad725b112c", "text": "Customizable V oting Strategies : When a user votes, the Core V oting Contract will reference a pre-approved\nlist of voting strategies. These strategies define the calculation of voting power and validate a user's voting\npower for that particular strategy , enabling multiple methods to exist simultaneously .\nCustomizable Quorum : A customizable quorum threshold can be set which checks that the minimum amount\nof votes required for a proposal's voting results to be considered valid before a contract call to be executed.\nThe quorum value may change as governance begins to understand participation rates but all changes to\nquorum requirements must be ratified by the governance community . Ultimately , this means that governance\ncan vary the security threshold on any on-chain action with very high granularity .\nOptional T imelock : A timelock is typically only used for security-critical votes. This means increased ef ficiency\nfor more minor proposals and measured protections for highly sensitive proposals.\nAn overview of governance roles, voting vaults, and delegation will provide the reader with the requisite knowledge", "metadata": {"page_number": 54, "source": "data/delv_council_docs.pdf"}}
{"id": "81ddaef9ea0d", "text": "for more minor proposals and measured protections for highly sensitive proposals.\nAn overview of governance roles, voting vaults, and delegation will provide the reader with the requisite knowledge\nto understand how the baseline framework works and what properties can be configured to suit the particular needs\nof a DAO.\nGovernance Roles\nDelegates\nYou can assign all of your V oting Power in the governance system to yourself or someone else, and they can vote\non your behalf. This is called Delegation. It's important that you select a delegate who is aligned with your vision for\nhow the DAO should evolve, as your votes would be counted towards their selection.\nGovernance Steering Council (GSC)\nThe GSC is a group of delegates, each of whom has reached a pre-established threshold of delegated voting\npower , giving them additional governance powers within the system, and as a result, additional responsibilities.\nThe opportunity to be on the GSC is open to anyone and can be earned by garnering enough delegated voting", "metadata": {"page_number": 54, "source": "data/delv_council_docs.pdf"}}
{"id": "2e5217546084", "text": "power , giving them additional governance powers within the system, and as a result, additional responsibilities.\nThe opportunity to be on the GSC is open to anyone and can be earned by garnering enough delegated voting\npower . GSC members must stay aligned with their delegators and relate to the general sentiments of the\ngovernance community to maintain their positions on the Council. Otherwise, they risk losing their delegated votes\nto another GSC member or new governance community member aspiring to better represent the interests of the\ncommunity . Removal from the GSC happens as a result of failing to maintain delegated votes and could indicate\nthe outgoing GSC member \u2019s lack of impact or disconnect to the general community of voters.\nIt is possible for the DAO to change the function of the GSC, including the possibility of adding special functions\n(propose votes directly on-chain, spend a portion of treasury funds at their discretion, etc.), and various\nresponsibilities (DAO2DAO relationships, collaborations, treasury management, community engagement, etc.), and", "metadata": {"page_number": 54, "source": "data/delv_council_docs.pdf"}}
{"id": "93696fd22946", "text": "(propose votes directly on-chain, spend a portion of treasury funds at their discretion, etc.), and various\nresponsibilities (DAO2DAO relationships, collaborations, treasury management, community engagement, etc.), and\nmight (depending upon a vote) be compensated for the time and ef fort that they dedicate to improving the governed\nprotocol. All of these functions and responsibilities must be defined and ratified through the governance process.\nNote: being a delegate and a GSC member is not necessarily mutually exclusive. Learn more in this blog post .", "metadata": {"page_number": 54, "source": "data/delv_council_docs.pdf"}}
{"id": "23cbbd162c37", "text": "Voting V aults and Delegation\nWhat are V oting V aults?\nVoting vaults  are smart contracts that allow any programmable logic to be used for allocating voting power to\ngovernance participants. Some example metrics include:\nReputation or merit-based systems\nUser protocol usage metrics\nUser governance participation data\nToken-holding\nPositions in DeFi protocols (staked assets, collateral, LP  positions, etc.)\nAny other metric or combination of metrics\nVoting V aults provide the ability to assign voting power to specific types of tokens/positions. The result is beautiful\n\u2014 governance users can maximize capital ef ficiency while maintaining the ability to delegate or vote when the time\ncomes. V oting vaults are designed to be upgraded, allowing for voting vault logic to be updated by governance and\nto avoid the pains that come with governance upgrade migrations.\nThe creation of a voting vault begins with defining a strategy for counting votes or providing voting power . Once the", "metadata": {"page_number": 55, "source": "data/delv_council_docs.pdf"}}
{"id": "00c73e96cb3d", "text": "to avoid the pains that come with governance upgrade migrations.\nThe creation of a voting vault begins with defining a strategy for counting votes or providing voting power . Once the\nlogic has been established, governance will vote to approve the method, and if successful, once the integration is\ncomplete, users can start voting.\nExamples of commonly used V oting V aults include:\nLocking V ault \u2013 allows users to deposit their tokens into a contract in exchange for voting power , which can\nalso be delegated to a dif ferent user .\nVesting V ault \u2013 allows locked / vesting positions to have voting power in the governance system and does so\nby using a defined multiplier for the vested tokens over unvested tokens.\nGSC V ault \u2013 enables a mode of governance that is distinct from other voting vaults; it provides one vote to\neach member of the GSC. Members can create, vote, and execute proposals if the GSC quorum is met, with\nquorum set by the DAO.", "metadata": {"page_number": 55, "source": "data/delv_council_docs.pdf"}}
{"id": "da8d1b233341", "text": "each member of the GSC. Members can create, vote, and execute proposals if the GSC quorum is met, with\nquorum set by the DAO.\nLearn about some of the possible voting vaults that can be created in this blog post .\nHow does delegated voting work?\nAnyone with V oting Power can assign all of their V oting Power in the protocol to someone else (i.e., a delegate),\nwho may vote on their behalf. This is called Delegation. It is important that the assignor selects a delegate who is\naligned with their vision for how the protocol should evolve, as the assignor \u2019s votes would be counted towards their\nvoting selection.", "metadata": {"page_number": 55, "source": "data/delv_council_docs.pdf"}}
{"id": "9c6ce3a06aee", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101This alleviates the issues of having to keep up with the multitude of discussions that happen surrounding the\nprotocol, and having to interact with on-chain contracts for each decision that needs to be made. Reducing the\ngovernance load on each participant ultimately helps to reduce some of the friction and encourage higher levels of\nvoter participation in governance decisions.\nParameters that Governance Operates\nGeneral Governance\nQuorum : The required minimum number of voting power in support of a proposal for it to succeed (this value is\nfixed and not a percentage of total voting power).\nTimelock Duration : The timelock is a speed bump for calls. It requires calls to wait for a defined period before\nthey can be executed. After a call is registered, the call can be removed during the waiting period, and an\nauthorized address can extend the waiting period only once.\nVoting Period : The total voting period in which votes can be cast. [Minimum voting period][extra voting period]", "metadata": {"page_number": 56, "source": "data/delv_council_docs.pdf"}}
{"id": "41c5d72fa85b", "text": "authorized address can extend the waiting period only once.\nVoting Period : The total voting period in which votes can be cast. [Minimum voting period][extra voting period]\nis the layout of the total time for voting.\nMinimum V oting Period : The minimum voting time before a vote can be executed.\nExtra V oting Period : The remaining time beyond the minimum voting period in which votes can be cast.\nProposal Threshold : The amount of voting power needed to submit a governance proposal on-chain.\nVesting V ault T oken Multiplier : The vesting vault contract is used to set up long-term grants for core\ncontributors to the DAOs ecosystem. It is also a voting vault so that community members can vote with vested\nbut unclaimed tokens and unvested tokens. The multiplier for voting power on the vesting vault allows locked /\nvesting positions to still have voting power in the governance system and does so by using a defined multiplier\nfor the vested tokens over unvested.", "metadata": {"page_number": 56, "source": "data/delv_council_docs.pdf"}}
{"id": "7ceefd5e3164", "text": "vesting positions to still have voting power in the governance system and does so by using a defined multiplier\nfor the vested tokens over unvested.\nGSC Parameters\nGSC Delegation Threshold : A threshold of delegated voting power , giving delegates a seat on the GSC. This\ncomes with additional governance powers within the system, and as a result, additional responsibilities.\nGSC Quorum : The required minimum number of GSC members needed to support a proposal for it to\nsucceed.\nGSC Proposal Threshold : The amount of GSC members needed to propose a GSC vote on-chain.\nProtocol Parameters\nProtocol Upgrades : Should the governed DAO community decide to upgrade the governed Protocol, it will go\nthrough governance. These types of changes will go through the process defined for Protocol Proposals.", "metadata": {"page_number": 56, "source": "data/delv_council_docs.pdf"}}
{"id": "5d17b1d454a0", "text": "Technical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury", "metadata": {"page_number": 57, "source": "data/delv_council_docs.pdf"}}
{"id": "cb100ad88856", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 57, "source": "data/delv_council_docs.pdf"}}
{"id": "8da56c7e811d", "text": "delvtech /council-kit Public\nCouncil Protocol Overview\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\n Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview", "metadata": {"page_number": 58, "source": "data/delv_council_docs.pdf"}}
{"id": "094a80fb1060", "text": "Governance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelockWelcome to the council-monorepo wiki!Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 58, "source": "data/delv_council_docs.pdf"}}
{"id": "28c806511b5e", "text": "Treasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 59, "source": "data/delv_council_docs.pdf"}}
{"id": "a7c9746c4c89", "text": "delvtech /council-kit Public\nCouncil Protocol Smart Contracts\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\n Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with CouncilIntroduction\nThe Council Protocol contains several architectural choices which make it a distinct new primitive in the\ndecentralized governance space:\nCouncil does not have a single security threshold to make a call, instead, various actions can be given dif ferent\nsecurity threshold requirements.\nCouncil abstracts the vote allocation process for assigning voting power away from the actual voting process\nmeaning that multiple complex vote allocation systems can run in parallel in the contracts.\nBy default, Council ships with a Governance Steering Council (GSC) enabled which can be assigned dif ferent", "metadata": {"page_number": 60, "source": "data/delv_council_docs.pdf"}}
{"id": "d68506eb947f", "text": "meaning that multiple complex vote allocation systems can run in parallel in the contracts.\nBy default, Council ships with a Governance Steering Council (GSC) enabled which can be assigned dif ferent\npowers than the core voting system. Together , these features allow a wide range of voting processes and\nsecurity procedures can be seamlessly integrated into one governance system.\nArchitecture Overview\nResources\nIntroduction to Element's Governance System blog post .\nGithub Repository\nTo learn more about the technical architecture of Council, read this blog post.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 60, "source": "data/delv_council_docs.pdf"}}
{"id": "7e6e64d19bfc", "text": "SDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports", "metadata": {"page_number": 61, "source": "data/delv_council_docs.pdf"}}
{"id": "52daa68a2006", "text": "Timelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 61, "source": "data/delv_council_docs.pdf"}}
{"id": "958d393396b3", "text": "delvtech /council-kit Public\nDAO (Social) Proposal Template\nJump to bottom\nCPSTL  edited this page on Mar 7  \u00b7 1 revision\nGP-X: [T itle]\nReferences\nA list of supporting materials referenced by this GP\nSentence Summary\nA description of what the Governance Proposal (GP) is focused on. Suggest 30 words max.\nParagraph Summary\nA description of what the Governance Proposal (GP) is focused on. 100 words max is recommended.\nMotivation\nA short description of the motivation behind the GP .\nSpecification / Proposal Details\nProposed process standard details - describes the new process or feature and the problem it is solving.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nGP#: <# to be assigned>\nTitle: <GP title>\nAuthor(s): <list of authors' names and/or Twitter/GitHub handles>\nType: DAO Proposal", "metadata": {"page_number": 62, "source": "data/delv_council_docs.pdf"}}
{"id": "421630a97e6d", "text": "GP#: <# to be assigned>\nTitle: <GP title>\nAuthor(s): <list of authors' names and/or Twitter/GitHub handles>\nType: DAO Proposal\nStatus: <Assigned by Forum moderators >\nDate Proposed: <yyyy-mm-dd>\nDate Ratified: <yyyy-mm-dd>", "metadata": {"page_number": 62, "source": "data/delv_council_docs.pdf"}}
{"id": "7fec0a813aef", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 63, "source": "data/delv_council_docs.pdf"}}
{"id": "f84b2e235f73", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasuryNext Steps (V oting Outcome Summary)\nClearly outline the next steps for this proposal. This includes what voting \u201cyes\u201d and \u201cno\u201d entails and what the\noutcome and next steps would be if the proposal were to pass the Of f-Chain Poll and On-Chain V ote.\nFor example:\nDiscuss this proposal on the forum and discord.\nImplement a poll on this proposal on Snapshot.\nIf passed: This proposal will move to an On-Chain V ote\nImplemented a vote on this proposal on the Governance Dashboard", "metadata": {"page_number": 63, "source": "data/delv_council_docs.pdf"}}
{"id": "954ae39a22b1", "text": "Discuss this proposal on the forum and discord.\nImplement a poll on this proposal on Snapshot.\nIf passed: This proposal will move to an On-Chain V ote\nImplemented a vote on this proposal on the Governance Dashboard\nIf passed: This proposal will be executed and the following will be deemed as a new DAO process,\netc.", "metadata": {"page_number": 63, "source": "data/delv_council_docs.pdf"}}
{"id": "b2989b3f27a6", "text": "Spender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 64, "source": "data/delv_council_docs.pdf"}}
{"id": "267f28e5b9b7", "text": "delvtech /council-kit Public\nGetting Started\nJump to bottom\nRyan Goree edited this page on Mar 9  \u00b7 11 revisions\nDeploying your Council Smart Contracts (CLI)\nThe process for properly deploying the smart contracts is detailed in the Contracts deployment guide .\n@council/deploy : This is a command-line tool that simplifies the process of deploying smart contracts to the\nblockchain. It also serves as a helpful reference for developers who want to understand how the deployment\nprocess works in more detail.\nCouncil Smart Contracts repo mock deploy script : This is another deployment script that can be used as a\nreference to understand how to deploy contracts manually , without using the CLI tool.\nSetting up the UI config object\nThe process for setting up and deploying the Reference UI to GitHub Pages is detailed in the UI deployment\nguide .\nBefore deploying the reference UI, you'll need to adjust the UI config  object to point to the correct addresses", "metadata": {"page_number": 65, "source": "data/delv_council_docs.pdf"}}
{"id": "35b7df7ddd01", "text": "The process for setting up and deploying the Reference UI to GitHub Pages is detailed in the UI deployment\nguide .\nBefore deploying the reference UI, you'll need to adjust the UI config  object to point to the correct addresses\nfor your deployed smart contracts.\nIf you've deployed your contracts to the Goerli test network, start by editing the Goerli config in the\napps/council-ui/src/config/goerli.ts file. If you used @council/deploy , you can use the helper code to\ngrab addresses from the latest deploy . They should all be gathered in packages/council-\ndeploy/src/deployments/goerli.deployments.json\nFor the Ethereum mainnet, edit the Mainnet config instead in the apps/council-ui/src/config/mainnet.ts\nfile.", "metadata": {"page_number": 65, "source": "data/delv_council_docs.pdf"}}
{"id": "de6aeed76f65", "text": "deploy/src/deployments/goerli.deployments.json\nFor the Ethereum mainnet, edit the Mainnet config instead in the apps/council-ui/src/config/mainnet.ts\nfile.\nIf you've deployed to a network other than Goerli or the mainnet, you'll need to create a new config in the\napps/council-ui/src/config/ directory based on one of the existing configs. Then, add the new config to\nthe council.config.ts file.\nDeploying the static UI\nNow that the UI config is done, you can deploy the Council Kit Reference UI. This is also covered in the UI\ndeployment guide .\nThe Reference UI uses Alchemy  to fetch data, so you'll need to acquire Alchemy API keys for each configured\nchain.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 65, "source": "data/delv_council_docs.pdf"}}
{"id": "f1567c12f96e", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultIf you added new chains, you'll have to add them to the node provider object in the apps/council-", "metadata": {"page_number": 66, "source": "data/delv_council_docs.pdf"}}
{"id": "f555d0b4dc04", "text": "Overview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultIf you added new chains, you'll have to add them to the node provider object in the apps/council-\nui/src/provider.ts file.\nThere are two deployment options outlined in this section of the guide: GitHub Pages and V ercel.\nTo use GitHub Pages, fork the repo and configure the Pages settings to use \"GitHub Actions\" as the build and\ndeployment source. You'll also need to add some repository secrets to enable the deployment workflow . You\ncan follow this UI deployment guide  for more details on this process.\nTo use V ercel, follow their documentation on deploying with Git.\nUpdating a new proposal when it gets created\nWhen a proposal is submitted on-chain, it should show up in the list of proposals in the user interface right", "metadata": {"page_number": 66, "source": "data/delv_council_docs.pdf"}}
{"id": "dcda7b1b3b78", "text": "To use V ercel, follow their documentation on deploying with Git.\nUpdating a new proposal when it gets created\nWhen a proposal is submitted on-chain, it should show up in the list of proposals in the user interface right\naway . However , the config can be updated with additional metadata that isn't available on-chain, as well as the\ntargets and calldatas for the proposal.\nThe process for adding new proposal data is outlined in the Adding New Proposal Data  section of the\nREADME.", "metadata": {"page_number": 66, "source": "data/delv_council_docs.pdf"}}
{"id": "6d2c041c0f16", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 67, "source": "data/delv_council_docs.pdf"}}
{"id": "4dc8902729e5", "text": "delvtech /council-kit Public\nGovernance Steering Council (GSC) V ault\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: GSCV ault.sol\nType/Category: V oting V ault/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/vaults/GSCV ault.sol\n1. Introduction (Summary)\nThe GSC vault enables a dif ferent mode of governance than the rest of the voting vaults. It gives one vote to each\nmember of a council. When attached to a core voting contract, it enables the council members to vote on proposals\nand execute them only with agreement from the council. The council is selected by a continuous election of\ngovernance power in another core voting system.\n2. Contract Details\nKey Functionalities:", "metadata": {"page_number": 68, "source": "data/delv_council_docs.pdf"}}
{"id": "a061e7cec26d", "text": "and execute them only with agreement from the council. The council is selected by a continuous election of\ngovernance power in another core voting system.\n2. Contract Details\nKey Functionalities:\nAllow anyone to join the governance steering council if they prove they meet a minimum voting power in the\nDAO.\nAllow anyone to kick a member if their voting power falls below a threshold.\nGive each member one vote after they have been on the council for a warmup period.\nStorage layout:\nA mapping tracks who is a member and when they joined.\nAn upgradable bound on how many votes are needed to join or remain on the council.\nAn upgradable warmup period length.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 68, "source": "data/delv_council_docs.pdf"}}
{"id": "8b3d527afa0c", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview3. Key Mechanisms & Concepts\nThe Governance Steering Council (GSC) is designed to be a group of people who take on extra responsibility in the\nDAO and gain extra powers. To join, the members must maintain some minimum amount of voting power in the\nDAO. The members can vote on issues through a copy of the core voting contract [which is not the same voting\ncontract as in the primary DAO]. To maintain the list of the GSC members, we use a model where the prospective\nmember should prove membership by proving they have enough voting power in the DAO. To remove a member ,", "metadata": {"page_number": 69, "source": "data/delv_council_docs.pdf"}}
{"id": "da875cb96697", "text": "contract as in the primary DAO]. To maintain the list of the GSC members, we use a model where the prospective\nmember should prove membership by proving they have enough voting power in the DAO. To remove a member ,\nthey are challenged. The voting vaults which initially contained their voting power are queried and, if they have not\nmaintained enough power , they are removed.\n4. Gotchas (Potential source of user error)\nIf there is a vault migration where the source of member voting power changes, they have to reprove their\nmembership. This reproof does not cause another idle period before they can vote.\nSince the GSC vaults stores the data of the voting vaults, the member votes and queries them again on kick.\nThe voting vaults of the DAO must enforce that a voting power query that previously didn\u2019t revert does not start\nreverting. If that happens, members may become un-kickable.", "metadata": {"page_number": 69, "source": "data/delv_council_docs.pdf"}}
{"id": "40e6008737a6", "text": "The voting vaults of the DAO must enforce that a voting power query that previously didn\u2019t revert does not start\nreverting. If that happens, members may become un-kickable.\nSome vaults require extra data, for example, to provide a Merkle proof or signature, in order to kick a member\nwho joins using those vaults the kicker must provide valid data as well.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nIn the case of corruption or inaction by the GSC, the DAO can vote to vote on the GSC core voting contract\nand be given a high number of votes. Meaning that the decisions of the GSC can be overridden by the DAO\nvia vote.\nThis also is a remediation path to many bugs in the GSC vault.", "metadata": {"page_number": 69, "source": "data/delv_council_docs.pdf"}}
{"id": "92bd51e232ea", "text": "Deploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 70, "source": "data/delv_council_docs.pdf"}}
{"id": "6676e8aab961", "text": "delvtech /council-kit Public\nHow to Create Your Own V oting V ault with Council\nJump to bottom\nCPSTL  edited this page on Mar 7  \u00b7 2 revisions\nIntroduction\nThis tutorial is at an intermediate level and is aimed at developers who have some experience with writing smart\ncontracts in Solidity . In this tutorial, we explore the requirements of writing a voting vault and give an example of\nhow to create an NFT  voting vault.\nThe boundaries on what is allowed as a voting vault are endless and are only limited by the interface that the Core\nVoting contract must be able to use to load data from the V ault. The Core V oting contract does not make any\nassumptions on the allocation of votes between voting vaults, the source of the votes, or the length of time the user\nhas had them.\nWARNING: if the total number of votes in the system exceeds size u128, overflows are possible. The interface that\nthe vault must match looks like:", "metadata": {"page_number": 71, "source": "data/delv_council_docs.pdf"}}
{"id": "dafa7724777b", "text": "has had them.\nWARNING: if the total number of votes in the system exceeds size u128, overflows are possible. The interface that\nthe vault must match looks like:\nThe voting vault must be able to retrieve the voting power for a user at the timestamp that the vote was created.\nNot following this temporal ordering can result in attacks on the governance system such as flashloans, or in the\nworst cases votes being falsely created. The vault then returns this power to the core voting contract when asked to\ndo so. The voting vault can use the extra data provided to load or manipulate votes, or it can be used for custom\ninstructions.\nExample: https://github.com/element-fi/council/blob/main/contracts/vaults/OptimisticRewards.sol  uses merkle\nproofs in the extra data to enable voting with unclaimed but distributed tokens.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\ninterface IVotingVault {", "metadata": {"page_number": 71, "source": "data/delv_council_docs.pdf"}}
{"id": "123a03d86d14", "text": "proofs in the extra data to enable voting with unclaimed but distributed tokens.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\ninterface IVotingVault {\n/// @notice Attempts to load the voting power of a user\n/// @param user The address we want to load the voting power of\n/// @param blockNumber the block number we want the user's voting power at\n/// @param extraData Abi encoded optional extra data used by some vaults, such as merkle \nproofs\n/// @return the number of votes\nfunction queryVotePower(\n    address user,\n    uint256 blockNumber,\n    bytes calldata extraData\n) external returns (uint256);\n}", "metadata": {"page_number": 71, "source": "data/delv_council_docs.pdf"}}
{"id": "b539a79a1cc2", "text": "For our first example of a voting vault, consider a vault that allows anyone who calls it to have any number of votes\nper request.\nThe voting vault contracts that have been deployed for the Element DAO all use upgradable proxies to ensure that\nwhen users deposit governance tokens (or other voting power systems such as NFT s, other types of tokens,\nreputation or identity , etc) and a change is made to the voting algorithms, they do not need to move the governance\ntokens to retain their votes/voting power . This upgradability design is not mandatory . However , the tooling for\nhistorical lookups developed for the Council Protocol uses hash based data locations for storage, and as a result,\nmay have incompatibilities with other systems.\nWARNING: Council Protocol Proxies must use the hash based storage addressing for ALL variables as the proxy\nitself uses slots 0 and 1. Using any standard storage will corrupt the proxy system.\nThe History .sol library is an assembly implementation of a binary search over an array of timestamps and value", "metadata": {"page_number": 72, "source": "data/delv_council_docs.pdf"}}
{"id": "a63e9bd00218", "text": "itself uses slots 0 and 1. Using any standard storage will corrupt the proxy system.\nThe History .sol library is an assembly implementation of a binary search over an array of timestamps and value\npairs, with optional garbage collection. It can be used to load and store timestamped user data for your\nimplementation.\nIn this tutorial, we will use it to build an implementation of an NFT  vesting vault without any delegation. First, we will\ncreate a deposit function which transfers a user \u2019s NFT  into the contract. Note: users can maintain control of the\nNFT if the NFT  contract contains a historical ownership lookup system such as the Compound (COMP) token.contract FriendlyVault is IVotingVault {\n// extraData encodes a uint128 of votes to give to the user via abi.encode\nfunction queryVotePower(\n    address user,\n    uint256 blockNumber,\n    bytes calldata extraData", "metadata": {"page_number": 72, "source": "data/delv_council_docs.pdf"}}
{"id": "b85627c32a3e", "text": "function queryVotePower(\n    address user,\n    uint256 blockNumber,\n    bytes calldata extraData\n) external override returns (uint256) {\n    uint128 votes = abi.decode(extraData, (uint128));\n    return uint256(votes);\n}\n}\n// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.3;\nimport \"../libraries/History.sol\";\nimport \"../libraries/Storage.sol\";\nimport \"./IERC721.sol\";\ncontract NFTVault {\n// Bring our libraries into scope\nusing History for *;", "metadata": {"page_number": 72, "source": "data/delv_council_docs.pdf"}}
{"id": "f3c5eda75e36", "text": "using Storage for *;\n// Only immutables can be declared without using the hash locations\nIERC721 immutable token;\nconstructor(IERC721 _token) {\n    token = _token;\n}\n/// @notice Returns the historical voting power tracker\n/// @return A struct which can push to and find items in block indexed storage\nfunction _votingPower()\n    internal\n    pure\n    returns (History.HistoricalBalances memory)\n{\n    // This call returns a storage mapping with a unique non overwrite-able storage location\n    // which can be persisted through upgrades, even if they change storage layout\n    return (History.load(\"votingPower\"));\n}\n/// @notice Transfers one NFT of our collection to this contract and then adds one vote \nto the user's voting power", "metadata": {"page_number": 73, "source": "data/delv_council_docs.pdf"}}
{"id": "71b315ac28ca", "text": "return (History.load(\"votingPower\"));\n}\n/// @notice Transfers one NFT of our collection to this contract and then adds one vote \nto the user's voting power\n/// @param tokenId The token Id, not the NFT to transfer.\nfunction deposit(uint256 tokenId) external {\n    // Get the token from the user\n    token.transferFrom(msg.sender, address(this), tokenId);\n    // Get the hash pointer to the history mapping\n    History.HistoricalBalances memory votingPower = _votingPower();\n    // Load the user votes\n    uint256 currentVotes = votingPower.loadTop(msg.sender);\n    // Push their new voting power\n    votingPower.push(msg.sender, currentVotes + 1);\n}", "metadata": {"page_number": 73, "source": "data/delv_council_docs.pdf"}}
{"id": "5e639069de9f", "text": "// Push their new voting power\n    votingPower.push(msg.sender, currentVotes + 1);\n}\n    \n/// @notice Attempts to load the voting power of a user\n/// @param user The address we want to load the voting power of\n/// @param blockNumber the block number at which we want the user's voting power\n/// @return the number of votes\nfunction queryVotePower(\n    address user,\n    uint256 blockNumber,\n    bytes calldata\n) external override returns (uint256) {\n    // Get our reference to historical data\n    History.HistoricalBalances memory votingPower = _votingPower();\n    // Find the historical data in our mapping\n    return\n        votingPower.find(\n            user,\n            blockNumber\n        );\n}", "metadata": {"page_number": 73, "source": "data/delv_council_docs.pdf"}}
{"id": "969e0559e8f7", "text": "// Find the historical data in our mapping\n    return\n        votingPower.find(\n            user,\n            blockNumber\n        );\n}\n}", "metadata": {"page_number": 73, "source": "data/delv_council_docs.pdf"}}
{"id": "677dfb536104", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault", "metadata": {"page_number": 74, "source": "data/delv_council_docs.pdf"}}
{"id": "321bebbd5add", "text": "DAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V aultThis NFT  voting vault contact is defined with an immutable NFT  token and then for each token added the user who\ntransferred it gets one vote. When the user adds a new token, their sum is incremented in the history mapping, and\nwhen the vault is queried the sum of the most recent timestamp before the query is returned. It does not support\nwithdrawals or delegation but these actions flow from this same pattern.\nSome simple but possibly instructive ways to tweak this NFT  voting vault to get dif ferent results: Change the\naddition of 1 to any other constant to make NFT s worth more votes. Replace the addition of 1 with a lookup of the", "metadata": {"page_number": 74, "source": "data/delv_council_docs.pdf"}}
{"id": "1bcc8891b7be", "text": "Some simple but possibly instructive ways to tweak this NFT  voting vault to get dif ferent results: Change the\naddition of 1 to any other constant to make NFT s worth more votes. Replace the addition of 1 with a lookup of the\ntraits and then map traits by rarity and add to sum to get votes based on rarity . Replace the \u2018queryV otePower \u2019\nfunction with one which calculates percent of deposited NFT s the user holds and multiplies it by a global constant\nfor capped votes distributed proportionally to users.\nBy tweaking either the storage or the vote counting functionality you can arrive at any number of possibilities from\nonly small changes.", "metadata": {"page_number": 74, "source": "data/delv_council_docs.pdf"}}
{"id": "5e606119c84e", "text": "Voting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 75, "source": "data/delv_council_docs.pdf"}}
{"id": "7bd6fb13964c", "text": "delvtech /council-kit Public\n 14 Open   13 ClosedCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nis:issue is:open  Labels  Milestones New issue\nAuthor Label Assignee Sort \nOnly run V ercel preview deployment for PRs after the build\ncheck has passed\nenhancement\n#383 opened 3 weeks ago  by ryangoree\nAdd proposal creation UI\nenhancement  ui\n#373 opened on May 22  by ryangoree\nCouncil Kit v0.1.0\n#349 opened on May 12  by ryangoree 1\nUpdate UI README regarding Push settings\ndocumentation  ui\n#347 opened on May 12  by ryangoree\nAdd ability to disable Push integration\nenhancement  ui\n#346 opened on May 12  by ryangoree 1\nUpdate wiki regarding Push settings\ndocumentation  ui\n#345 opened on May 12  by ryangoree", "metadata": {"page_number": 76, "source": "data/delv_council_docs.pdf"}}
{"id": "cffe87aff07b", "text": "Add ability to disable Push integration\nenhancement  ui\n#346 opened on May 12  by ryangoree 1\nUpdate wiki regarding Push settings\ndocumentation  ui\n#345 opened on May 12  by ryangoree\nAdd missing contracts to the SDK\nenhancement  sdk\n#343 opened on May 9  by ryangoree 1\nAdd guide for migrating from another gov system / token\ndocumentation\n#338 opened on May 3  by akhamisa 1\nPublish packages to NPM\n#337 opened on May 3  by akhamisa 1", "metadata": {"page_number": 76, "source": "data/delv_council_docs.pdf"}}
{"id": "bda735a3b40c", "text": "ProT ip! Mix and match filters to narrow down what you\u2019re looking for .Add % of VP  that is delegated\nenhancement  ui\n#336 opened on May 3  by akhamisa\nAdd voting power update UI for vesting vault\nenhancement  ui\n#335 opened on May 3  by akhamisa\nAdd proposal execution UI\nenhancement  ui\n#334 opened on May 3  by akhamisa\nAdd airdrop claim UI\nenhancement  ui\n#333 opened on May 3  by akhamisa 14  1\nKarma integration of data points into Council UI\nenhancement  ui\n#332 opened on May 3  by akhamisa 3", "metadata": {"page_number": 77, "source": "data/delv_council_docs.pdf"}}
{"id": "732ee0f33b14", "text": "delvtech /council-kit Public\nLocking V ault\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: LockingV ault.sol\nType/Category: V oting V ault/Governance\nContract Source: https://github.com/element-fi/council/blob/main/contracts/vaults/LockingV ault.sol\n1. Introduction (Summary)\nThe Locking vault is a contract that allows the DAO to allocate votes to the token holders. It works by having the\nholders of the token deposit them into the Locking V ault. After votes have been allocated to users, they can then\ndelegate votes to other addresses to vote on their behalf. To use their tokens in other contexts, the users must\nwithdraw them from the locking vault.\n2. Contract Details\nKey Functionalities:\nUsers can deposit into the locking vault and then either be allocated votes or have their votes be delegated to", "metadata": {"page_number": 78, "source": "data/delv_council_docs.pdf"}}
{"id": "f2f096e9fe09", "text": "withdraw them from the locking vault.\n2. Contract Details\nKey Functionalities:\nUsers can deposit into the locking vault and then either be allocated votes or have their votes be delegated to\nanother address.\nUsers can change which address their votes are delegated to.\nUsers can withdraw their tokens to move them back into their wallets.\nThe core voting contract can query the LockingV ault to check the historical voting power of users in it.\nStorage Layout:\nA system of state which tracks the historical power of addresses using the logic of the History .sol library .\nA mapping that tracks a user's deposited amount and who they have delegated to.\nConfiguration parameters such as the token used and how much voting power history to retain.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 78, "source": "data/delv_council_docs.pdf"}}
{"id": "1e2ad98faf6c", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials3. Key Mechanisms & Concepts\nThe Council DAO framework can allocate votes to multiple sources but cannot employ the Compound governance\ncontracts technique that tracks voting power inside the ERC20 itself. Therefore, for a user to have their voting\npower recognized, they must deposit into the voting contracts. This contract enables a user to deposit their tokens\nand receive voting power . When they deposit, they are allowed to select an address that may vote with their voting\npower . Each address has a historical tracker of voting power indexed by block number , and when they deposit or", "metadata": {"page_number": 79, "source": "data/delv_council_docs.pdf"}}
{"id": "31ca83486a30", "text": "and receive voting power . When they deposit, they are allowed to select an address that may vote with their voting\npower . Each address has a historical tracker of voting power indexed by block number , and when they deposit or\nare delegated to the historical tracker records this. The core voting contract then calls the locking vault to ask how\nmany votes an address has when a user votes on a proposal.\n4. Gotchas (Potential source of user error)\nA user can fund another user's account and, on deposit, select the first delegation address. The\n'firstDelegation' field in the call after the first call is ignored.\nIf a malicious actor deposits to another user's address before that user deposits, then that malicious actor can\nselect the delegation for the user . If the user deposits, they should confirm they have not been front run and, if\nthey have, they must change delegation.\nVote power queries will revert for users who have never been deposited or delegated to.", "metadata": {"page_number": 79, "source": "data/delv_council_docs.pdf"}}
{"id": "ff6c15123927", "text": "select the delegation for the user . If the user deposits, they should confirm they have not been front run and, if\nthey have, they must change delegation.\nVote power queries will revert for users who have never been deposited or delegated to.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nThe Locking V ault contract is intended to be used as the logic contract for an upgradable proxy , and it is\nrecommended that it be only used in this context.\nSince the Locking V ault is upgradeable, its funds have the same risk profile as the governance system as a\nwhole.\nIn the case of a bug, the governance system should upgrade the locking proxy to protect user funds. However ,\nbecause the locking vault is a primary source of funds, certain critical bugs may compromise its ability to do so.", "metadata": {"page_number": 79, "source": "data/delv_council_docs.pdf"}}
{"id": "c6988217d832", "text": "Council UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally", "metadata": {"page_number": 80, "source": "data/delv_council_docs.pdf"}}
{"id": "05c3c9d0405e", "text": "Treasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 80, "source": "data/delv_council_docs.pdf"}}
{"id": "691d2d3f8936", "text": "delvtech /council-kit Public\nOptimistic Grants\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: OptimisticGrants.sol\nType/Category: Grants/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/features/OptimisticGrants.sol\n1. Introduction (Summary)\nThis contract allows for grants to be made to contributors of the Element protocol with less overhead than other\ngrant programs. When the grant is allocated, it contains an expiration date, and if not removed before then, it is\nassumed the grantee did what was expected, and they are allowed to withdraw .\n2. Contract Details\nKey Functionalities:\nAllow the owner to create and remove grants.\nAllows grantees to claim grants after they have completed their work.\nStorage:\nA mapping tracking grants.\nAn address authorized to create and remove grants.", "metadata": {"page_number": 81, "source": "data/delv_council_docs.pdf"}}
{"id": "27beaa2536dd", "text": "Key Functionalities:\nAllow the owner to create and remove grants.\nAllows grantees to claim grants after they have completed their work.\nStorage:\nA mapping tracking grants.\nAn address authorized to create and remove grants.\nA tracker of the number of tokens the contract holds.\n3. Key Mechanisms & Concepts\nThe optimistic grants program can be run directly by a DAO-wide governance vote, but it is more likely that it will\nhandle grants allocated by a permissioned group like the GSC. Unlike other grants programs, the optimistic grants\nsmart contract sets a schedule so that, after the grant period is up, the grantee can claim the grant. The default\nassumption of someone receiving an optimistic grant is that they will perform as the grant would indicate. Only in\nthe case of non-performance, the grant is removed by the funding body .Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 81, "source": "data/delv_council_docs.pdf"}}
{"id": "b2ed26b1a019", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 82, "source": "data/delv_council_docs.pdf"}}
{"id": "27ffe4b5313f", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary4. Gotchas (Potential source of user error)\nThe authorized grant address must fund the contract via the deposit method\nThe grant contract tracks solvency , so it must be funded before grants are created.\nFunds directly transferred to this contract may not be recoverable.", "metadata": {"page_number": 82, "source": "data/delv_council_docs.pdf"}}
{"id": "f882256fb1c9", "text": "Audits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 83, "source": "data/delv_council_docs.pdf"}}
{"id": "a5a7921d98b1", "text": "delvtech /council-kit Public\nOptimistic Rewards\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: OptimisticRewards.sol\nType/Category: Rewards/Governance\nContract Source:  https://github.com/element-fi/council/blob/main/contracts/vaults/OptimisticRewards.sol\n1. Introduction (Summary)\nThe Optimistic Rewards contract is a system for allocating rewards over time without writing new rewards smart\ncontracts. It allows a proposer to propose a new set of rewards and then, after a review period, it is made of ficial.\nDuring the review period, governance can reject the proposed rewards. The name optimistic comes from the fact\nthat the mechanism is a play on an optimistic rollup, where the fraud proofs are governance votes but, instead of L2\ntransactions, the updates are new rewards balances.\n2. Contract Details\nKey Functionalities:", "metadata": {"page_number": 84, "source": "data/delv_council_docs.pdf"}}
{"id": "416b80babb1a", "text": "that the mechanism is a play on an optimistic rollup, where the fraud proofs are governance votes but, instead of L2\ntransactions, the updates are new rewards balances.\n2. Contract Details\nKey Functionalities:\nThe ability for addresses who have confirmed rewards to claim those rewards, or to claim them and then move\nthem into the DAO to continue voting.\nThe ability for addresses who have confirmed rewards but have not claimed them to vote using them as votes.\nA proposer can propose a new Merkle root encoding rewards.\nGovernance can reject a new Merkle root encoding rewards.\nStorage layout:\nA Merkle root containing confirmed rewards.\nA mapping of how many rewards each address has claimed.\nA proposed root and when it was proposed.\nA challenge period length.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 84, "source": "data/delv_council_docs.pdf"}}
{"id": "733518ebd323", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework3. Key Mechanisms & Concepts\nRewards systems voted in DAOs are often complex mathematical formulas on how much incentive to give to taking\nactions in the protocol. Each of these mechanisms must often be encoded into smart contracts. Given the security\nrisk of smart contracts and implementation complexity , this naturally limits what can be done with rewards, how\ncomplex they are, and how fast they can change or be implemented. The optimistic rewards paradigm is a way to", "metadata": {"page_number": 85, "source": "data/delv_council_docs.pdf"}}
{"id": "84bbb3d0fa88", "text": "risk of smart contracts and implementation complexity , this naturally limits what can be done with rewards, how\ncomplex they are, and how fast they can change or be implemented. The optimistic rewards paradigm is a way to\nmove rewards calculation of f-chain and alleviate those limitations. To accomplish this, a proposer address is\nselected by governance. The proposer runs a deterministic program that calculates rewards, and then submits this\non-chain for review . Community members also run the rewards program and, if fraud is detected, they can submit a\nDAO vote to remove the proposer and block the rewards. Given an active community , there is no incentive for a\nmalicious proposer to submit rewards.\n4. Gotchas (Potential source of user error)\nRewards Merkle roots must contain unique accounts, they must be append-only , and the accounts must only\nincrease in rewards allocated. The root tracks the total all-time rewards granted.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)", "metadata": {"page_number": 85, "source": "data/delv_council_docs.pdf"}}
{"id": "1b0d5318567f", "text": "increase in rewards allocated. The root tracks the total all-time rewards granted.\n5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nAn engaged community of verifiers of rewards is required for this system to work. The DAO should consider\nallocating rewards to chain watchers to encourage this.\nThe total tokens in this contract should be limited so that, if a bug or hack occurs, the risk is mitigated.", "metadata": {"page_number": 85, "source": "data/delv_council_docs.pdf"}}
{"id": "401c8bc88b17", "text": "Governance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 86, "source": "data/delv_council_docs.pdf"}}
{"id": "9b55dcd892a0", "text": "delvtech /council-kit Public\nPossible V oting V ault Examples\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\n Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal FrameworkIdeas for V oting V aults\nIn terms of future voting vaults to experiment with, once the process for establishing logic for counting votes /", "metadata": {"page_number": 87, "source": "data/delv_council_docs.pdf"}}
{"id": "ebf1a4d0e2ab", "text": "Get Started with the Council SDK\nExtending the SDK\nGovernance Proposal FrameworkIdeas for V oting V aults\nIn terms of future voting vaults to experiment with, once the process for establishing logic for counting votes /\nproviding voting power is complete, governance will vote to approve the method, and if successful, the integration is\ncomplete, and users can start voting!\nSome of the possible future voting vaults consist of:\nCompound/Aave V ault\u2014 use tokens as collateral and/or earn interest while keeping voting power .\nLP Vault\u2014 get voting power while providing liquidity .\nIdentity V erified V ault\u2014 verify your digital identity as a unique person to get voting power .\nL2-L1 Synthesis V ault-L2 posts balance tree hashes and L1 votes using the Merkel balance proof of L2.\nNFT V ault-allow all owners of a specific NFT  to have voting power .Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 87, "source": "data/delv_council_docs.pdf"}}
{"id": "10a7ea57e797", "text": "Governance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 88, "source": "data/delv_council_docs.pdf"}}
{"id": "3b2aa63ae667", "text": "delvtech /council-kit Public\nCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\n 1 Open  0 Closed\n Council\n#7 updated 3 weeks agoThe Council framework comprises both the Council Protocol smart\ncontracts and Council Kit. Council Kit is the SDK for launching,\nbuilding and maintaining DAOs and their governance systems. It\nincludes a reference UI, deployment template, CLI, and Typescript\nSDK.is:open \nSort", "metadata": {"page_number": 89, "source": "data/delv_council_docs.pdf"}}
{"id": "b8352f7a94ff", "text": "delvtech /council-kit Public\nProtocol (Executable) Proposal Template\nJump to bottom\nCPSTL  edited this page on Mar 7  \u00b7 3 revisions\nGP-X: [T itle]\nReferences\nA list of supporting materials referenced by this GP .\nSentence Summary\nA description of what the Governance Proposal (GP) is focused on in 30 words maximum.\nParagraph Summary\nA description of what the Governance Proposal (GP) is focused on.\nMotivation\nA short description of the motivation behind the proposed technical feature, solution, or upgrade.\nSpecification\nDescribe the details of the proposed technical solution. The specification should be detailed enough to allow an\nimplementation to begin as well as testing. The specification for technical GPs must include the following\ncomponents:Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nGP#: <# to be assigned>\nTitle: <GP title>", "metadata": {"page_number": 90, "source": "data/delv_council_docs.pdf"}}
{"id": "bbdb4b79cfdb", "text": "implementation to begin as well as testing. The specification for technical GPs must include the following\ncomponents:Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nGP#: <# to be assigned>\nTitle: <GP title>\nAuthor(s): <list of authors' names and/or Twitter/GitHub handles>\nType: Protocol Proposal\nStatus: <Assigned by Forum moderators >\nDate Proposed: <yyyy-mm-dd>\nDate Ratified: <yyyy-mm-dd>", "metadata": {"page_number": 90, "source": "data/delv_council_docs.pdf"}}
{"id": "5661b1029cd1", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council ContractsProposed Code\nThe final code that could be used directly in the on-chain vote to execute the GP .\nTest Cases\nFor the implementation or testing of the proposed code.\nSecurity Considerations\nThis section is to include or (proactively document) any security-relevant design information, potential failure\nmodes, implementation details, and important discussions related to the proposed change.\nTechnical Review Plan or Audit Information (If already available)\nThis section is to include the process for reviewing and auditing the code. If there are no audits available yet,\ndescribe the plan for it. A Protocol proposal should NOT  move to a final vote without being reviewed/audited.", "metadata": {"page_number": 91, "source": "data/delv_council_docs.pdf"}}
{"id": "01ed197072fc", "text": "This section is to include the process for reviewing and auditing the code. If there are no audits available yet,\ndescribe the plan for it. A Protocol proposal should NOT  move to a final vote without being reviewed/audited.\nTherefore, it is recommended to be as detailed as possible in this section.\nNext Steps (V oting Outcome Summary)\nClearly outline the next steps for this proposal. This includes a recommended review period for the technical\nsolution, what voting \u201cyes\u201d and \u201cno\u201d entails, and what the outcome and next steps would be if the proposal\nwere to pass the Of f-Chain Poll and On-Chain V ote.\nFor example:\nDiscuss this proposal on the forum and discord.\nImplement a poll on this proposal on Snapshot.\nIf passed: This proposal will move to an audit review period.\nA code review process will take X and should not be moved to an On-Chain vote before it has been\ndeemed safe.", "metadata": {"page_number": 91, "source": "data/delv_council_docs.pdf"}}
{"id": "8f15cd5b833d", "text": "Implement a poll on this proposal on Snapshot.\nIf passed: This proposal will move to an audit review period.\nA code review process will take X and should not be moved to an On-Chain vote before it has been\ndeemed safe.\nImplemented a vote on this proposal on the Governance Dashboard\nIf passed: This proposal will be executed and the following will be implemented to the governed\nProtocol.", "metadata": {"page_number": 91, "source": "data/delv_council_docs.pdf"}}
{"id": "ab822a499e7f", "text": "Contributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally", "metadata": {"page_number": 92, "source": "data/delv_council_docs.pdf"}}
{"id": "7f2d37c5914a", "text": "Treasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 92, "source": "data/delv_council_docs.pdf"}}
{"id": "1b1460e1b354", "text": "delvtech /council-kit Public\n 2 Open   368 Closed\n ProT ip! Filter pull requests by the default branch with base:main .Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nis:pr is:open  Labels  Milestones New\nAuthor Label Assignee Sort \nfeat: add airdrop ui  \n#388 opened 2 weeks ago  by Chakravarthy7102 24  1\nAdded Opt-in/out button to start receiving notifications from\nPush  \n#342 opened on May 9  by Siddesh7 9  1", "metadata": {"page_number": 93, "source": "data/delv_council_docs.pdf"}}
{"id": "5f4c859d3249", "text": "delvtech /council-kit Public\nReference UI Deployment Guide (GitHub Pages)\nJump to bottom\nMazyGio edited this page on Mar 9  \u00b7 5 revisions\nIf you've deployed the Council contracts on the blockchain, and are looking for a UI to interact with them, the\nCouncil Kit  provides a Reference UI that you can deploy and plug into your contracts. You can also follow the video\ntutorial .\nThis guide will show you how to deploy the Reference UI on GitHub Pages, but you can use a similar process to\ndeploy it onto your preferred platform instead\nRequirements\nA previous deployment of the Council Contracts on the blockchain (follow the deployment guide  if you need\nhelp)\nGitHub account\nNode provider (e.g. Alchemy)\nMore?\nFork the repository\nIf you already made a fork of the repository to deploy the contracts, you can use that fork. Otherwise, visit the", "metadata": {"page_number": 94, "source": "data/delv_council_docs.pdf"}}
{"id": "81d1ff41ad2b", "text": "GitHub account\nNode provider (e.g. Alchemy)\nMore?\nFork the repository\nIf you already made a fork of the repository to deploy the contracts, you can use that fork. Otherwise, visit the\nCouncil Kit repository page on GitHub and use the buttons on the top-right section to make your own fork.\nYou'll be prompted for a repository name. Keep in mind that this name will become the base path on the URL  for\nthis deployment.Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 94, "source": "data/delv_council_docs.pdf"}}
{"id": "b8668a0d2114", "text": "Configure GitHub for UI deployment\nThe Council Kit codebase includes some GitHub W orkflows to facilitate deployment in GitHub Pages. You can find\nthese in the path .github/workflows, although you won't need to modify them for this guide.\nOne of these workflows is used to Deploy the web app to GitHub Pages every time there's a new push to the main\nbranch. To use it, you'll need to follow a few steps on GitHub.\nSet GitHub Pages to build from Actions\nGo to your repository's Settings tab. Once there, click on the Pages section, and under Build and Deployment, set\nthe Source to GitHub Actions (beta)\nAdd your environment variables\nGitHub Pages will automatically set your page's path to be the name of your repository , so we need to inform the", "metadata": {"page_number": 95, "source": "data/delv_council_docs.pdf"}}
{"id": "5c70da18387e", "text": "the Source to GitHub Actions (beta)\nAdd your environment variables\nGitHub Pages will automatically set your page's path to be the name of your repository , so we need to inform the\ncode what that name is. W e'll do that by adding a Secret to the repository , which is just a variable. W e'll need two:", "metadata": {"page_number": 95, "source": "data/delv_council_docs.pdf"}}
{"id": "373fe1de5ee5", "text": "COUNCIL_UI_BASE_PATH: The base path that GitHub Pages assigns to your deployment. This is our way of letting\nthe app know about it. GOERLI_ALCHEMY_KEY: The code uses Alchemy as its default node provider . We'll go over\nhow to use a dif ferent one later on.\nOnce there, set the new Secret's name to COUNCIL_UI_BASE_PATH, and its value to /<your-repo-name>. Don't\nforget the forward slash ( /).\nUse the same process to add your Alchemy API Key with the name GOERLI_ALCHEMY_KEY .\nDeploy the council-ui app to GitHub Pages\nNow that all our variables and configurations are set, we're ready to do the actual deployment. On the repository\npage, go to the Actions  tab. It will ask for your consent to run W orkflows. Once you accept, Look on the left side\nmenu for the Deploy Council UI to GH Pages  option.", "metadata": {"page_number": 96, "source": "data/delv_council_docs.pdf"}}
{"id": "df913a829990", "text": "page, go to the Actions  tab. It will ask for your consent to run W orkflows. Once you accept, Look on the left side\nmenu for the Deploy Council UI to GH Pages  option.\nThis workflow is set to run after any changes are pushed to the main branch, but for this first time, we'll run it\nmanually . Look on the right side for the Run workflow  dropdown, and click the Run workflow  button.\nAfter a few seconds, the screen will update and show that the workflow has started running. It will take a few\nminutes. What's happening in the background is that the project is getting built with Next.js and uploaded as a static\nsite onto GitHub Pages. You can check more details and even modify the workflow in the .github/workflows/gh-\npages-council.yml file.\nOnce it's finished running, you can click into the workflow task, where you'll find a link to your newly-deployed page", "metadata": {"page_number": 96, "source": "data/delv_council_docs.pdf"}}
{"id": "df3bd481a940", "text": "pages-council.yml file.\nOnce it's finished running, you can click into the workflow task, where you'll find a link to your newly-deployed page\nunder the deploy  subtask.\nNOTE  The contracts that the deployed UI will plug into are gathered in the packages/council-\ndeploy/src/deployments/goerli.deployments.json apps/council-ui/src/\nCustomization: How to use a different node provider\nThis guide used Alchemy as the node provider for on-chain data, but you can use any other node provider by\nmaking a few adjustments:\nAdd the required environment variables on GitHub\nIf your chosen node provider requires an API key or other environment data, you must add it to GitHub Pages in the\nsame way we added the base path and the Alchemy API key: go to Settings > Secrets and variables > Add Secret\nand input the Secret's name and value.", "metadata": {"page_number": 96, "source": "data/delv_council_docs.pdf"}}
{"id": "ac865b896724", "text": "same way we added the base path and the Alchemy API key: go to Settings > Secrets and variables > Add Secret\nand input the Secret's name and value.\nAdjust the Deploy workflow so it reads the newly added variable", "metadata": {"page_number": 96, "source": "data/delv_council_docs.pdf"}}
{"id": "ae7b992f568c", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultYou must let the deploy workflow know about the new variables, which you can do by adding them to the file", "metadata": {"page_number": 97, "source": "data/delv_council_docs.pdf"}}
{"id": "ef3580e811f9", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V aultYou must let the deploy workflow know about the new variables, which you can do by adding them to the file\n.github/workflows/gh-pages-council.yml.\nLook for the following lines:\nThat's where and how you would add the new Secret you've created on GitHub Pages.\nAdd the node provider to the configuration in apps/council-ui/src/providers.ts\nYou can follow the same template on the apps/council-ui/src/providers.ts file to replace Alchemy for your\npreferred node provider .- name: Build with Next.js\n  env:\n    NEXT_PUBLIC_MAINNET_ALCHEMY_KEY: ${{ secrets.MAINNET_ALCHEMY_KEY }}", "metadata": {"page_number": 97, "source": "data/delv_council_docs.pdf"}}
{"id": "e4222972e72e", "text": "preferred node provider .- name: Build with Next.js\n  env:\n    NEXT_PUBLIC_MAINNET_ALCHEMY_KEY: ${{ secrets.MAINNET_ALCHEMY_KEY }}\n    NEXT_PUBLIC_GOERLI_ALCHEMY_KEY: ${{ secrets.GOERLI_ALCHEMY_KEY }}\n    NEXT_PUBLIC_COUNCIL_UI_BASE_PATH: ${{ secrets.COUNCIL_UI_BASE_PATH }}", "metadata": {"page_number": 97, "source": "data/delv_council_docs.pdf"}}
{"id": "7387f123a56c", "text": "Voting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 98, "source": "data/delv_council_docs.pdf"}}
{"id": "87e48d5bba33", "text": "delvtech /council-kit Public\nSDK Guide: Using Typescript to interact with Council\nContracts\nJump to bottom\nAlim edited this page on Mar 14  \u00b7 3 revisions\nThe Council Kit includes an SDK to help you build on top of it. You can read on to learn more, or follow the video\nversion of this guide .\nFirst step: get the code\nUse git to clone the council-kit repository:\nNOTE  This is a monorepo ( turborepo ). This means that there's a package.json configuration file at the top\nlevel (or root) directory , and another one on each app or package which lists their own configuration options\nand subdependencies. This allows apps and packages in your project to share dependencies without having\nto publish them in a registry (such as npm).\nTo begin, run yarn on the root directory to install all dependencies:\nOnce installation finishes, use yarn to build the packages too:", "metadata": {"page_number": 99, "source": "data/delv_council_docs.pdf"}}
{"id": "060dfaae478c", "text": "to publish them in a registry (such as npm).\nTo begin, run yarn on the root directory to install all dependencies:\nOnce installation finishes, use yarn to build the packages too:\nThis command runs the build script on all the packages that have one under the packages/ directory\nSDK app config\npackage.json npm scripts\nThe SDK starter app includes three example scripts you can use as reference to help you get started. You'll find\nthem in the apps/council-sdk-starter/src/scripts directory . You'll also find an entry for each of these scripts\nin the package.json file:Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\ngit clone git@github.com:element-fi/council-kit.git\nyarn\nyarn build:packages", "metadata": {"page_number": 99, "source": "data/delv_council_docs.pdf"}}
{"id": "9900048413b6", "text": "The commands called for each entry are pretty similar:\nts-node is the command used to run the typescript file\n-r dotenv/config tells it to use the config variables from your .env file\n-r tsconfig-paths/register tells it to also load the paths from the tsconfig.json file when running the\nscript\nIt's an easy template to follow if you want to add any new scripts:\n1. Create the typescript file under the apps/council-sdk-starter/src/scripts directory\n2. Add the script entry in package.json\n3. Run the script using yarn workspace council-sdk-starter your-script-name-here\nEnvironment variables\nThe SDK will read environment variables from your apps/council-sdk-starter/src/.env file. If you don't have a\n.env file, use the .env.example file as a template to create your own.", "metadata": {"page_number": 100, "source": "data/delv_council_docs.pdf"}}
{"id": "ea0bc756065a", "text": "The SDK will read environment variables from your apps/council-sdk-starter/src/.env file. If you don't have a\n.env file, use the .env.example file as a template to create your own.\nBlockchain node provider\nThe SDK includes the file apps/council-sdk-starter/src/provider.ts to handle which node provider to use for\nmaking on-chain calls. It reads the PROVIDER_URI variable from your .env file.\nIf you don't set the PROVIDER_URI variable, the SDK defaults to using a Goerli provider . Any adjustments you'd like\nto make to the logic around node providers can be made in the apps/council-sdk-starter/src/provider.ts file.\nWallet address\nIf your scripts need to make on-chain transactions, you'll have to add a wallet private key to the", "metadata": {"page_number": 100, "source": "data/delv_council_docs.pdf"}}
{"id": "83e75a66d77d", "text": "Wallet address\nIf your scripts need to make on-chain transactions, you'll have to add a wallet private key to the\nWALLET_PRIVATE_KEY variable in the .env file to be able to execute them. Make sure the wallet is funded\nproperly so that it is able to make transactions.\nWrite an example script: Get V oter Activity\nLet's create an example script in Typescript to get the voting activity of one voter in the DAO, using the SDK. Here's\nthe full code that we'll go through, for reference:\"scripts\": {\n  ...\n  \"createProposal\": \"ts-node -r dotenv/config -r tsconfig-paths/register \nsrc/scripts/createProposal.ts\",\n  \"getGSCMembers\": \"ts-node -r dotenv/config -r tsconfig-paths/register \nsrc/scripts/getGSCMembers.ts\",", "metadata": {"page_number": 100, "source": "data/delv_council_docs.pdf"}}
{"id": "f797778d50c0", "text": "\"getGSCMembers\": \"ts-node -r dotenv/config -r tsconfig-paths/register \nsrc/scripts/getGSCMembers.ts\",\n  \"getProposalResults\": \"ts-node -r dotenv/config -r tsconfig-paths/register \nsrc/scripts/getProposalResults.ts\"\n},", "metadata": {"page_number": 100, "source": "data/delv_council_docs.pdf"}}
{"id": "8e7113ecd1f3", "text": "Import Council types and functions\nYou can easily copy one of the existing example scripts to get a baseline for Council types and functions that you'll\nwant to use for your development:\nThe first line imports several object types that map to the Council architecture:\nCouncilContext: Helper class that keeps track of data sources and cache values.\nVotingContract: Typescript class that maps to a specified CoreV oting contract.\nBallot: Interface which stores the voter's choice on a specific vote (yes | no | maybe)import { CouncilContext, VoteResults, VotingContract, Ballot } from \"@council/sdk\";\nimport { getElementAddress } from \"src/addresses/elementAddresses\";\nimport { provider } from \"src/provider\";\n// wrap the script in an async function so we can await promises\nexport async function getVoterActivity(): Promise<void> {", "metadata": {"page_number": 101, "source": "data/delv_council_docs.pdf"}}
{"id": "c851022f258c", "text": "import { provider } from \"src/provider\";\n// wrap the script in an async function so we can await promises\nexport async function getVoterActivity(): Promise<void> {\n  const addresses = await getElementAddress();\n  // create a CouncilContext instance\n  const context = new CouncilContext(provider);\n  // Create a VotingContract instance.\n  // The vaults array can be left empty since we won't be fetching any voting\n  // power data.\n  const coreVoting = new VotingContract(addresses.coreVoting, [], context);\n  // get all votes made by an address\n  const votes = await coreVoting.getVotes(\"0x7AE8b0D6353F0931EB9FaC0A3562fA9e4C6Ff933\");", "metadata": {"page_number": 101, "source": "data/delv_council_docs.pdf"}}
{"id": "82ec091e67c9", "text": "const votes = await coreVoting.getVotes(\"0x7AE8b0D6353F0931EB9FaC0A3562fA9e4C6Ff933\");\n  // Create a data structure to print out to the console\n  const votesByProposalId: Record<number, { ballot: Ballot, votingPower: string }> = {}\n  for (const vote of votes) {\n    votesByProposalId[vote.proposal.id] = {\n      ballot: vote.ballot,\n      votingPower: vote.power\n    };\n  }\n  console.table(votesByProposalId);\n  process.exit();\n}\ngetVoterActivity();\nimport { CouncilContext, VotingContract, Ballot } from \"@council/sdk\";", "metadata": {"page_number": 101, "source": "data/delv_council_docs.pdf"}}
{"id": "bfd64f3084a7", "text": "process.exit();\n}\ngetVoterActivity();\nimport { CouncilContext, VotingContract, Ballot } from \"@council/sdk\";\nimport { getElementAddress } from \"src/addresses/elementAddresses\";\nimport { provider } from \"src/provider\";", "metadata": {"page_number": 101, "source": "data/delv_council_docs.pdf"}}
{"id": "0c416f74c666", "text": "The second and third lines import helper functions or objects for Council data and for blockchain interaction:\ngetElementAddress: Helper function that fetches all contract addresses from a specified Council deployment.\nYou can see the logic in the apps/council-sdk-starter/src/addresses/elementAddresses.ts file.\nprovider: Node provider object which facilitates blockchain interaction from the Typescript script.\nYou can see all the SDK's exports  in its docs.\nIf you copied one of the existing scripts, you'll see the template we've followed wraps the script's logic in an async\nfunction:\nThis is done so we can await certain values within the script.\nGet Council objects to interact with\nWithin the actual logic of the script, the first few lines fetch some useful data:\nWe've explained how to obtain the addresses and what the context is for . The CouncilContext takes a provider", "metadata": {"page_number": 102, "source": "data/delv_council_docs.pdf"}}
{"id": "8f5f35c50949", "text": "Get Council objects to interact with\nWithin the actual logic of the script, the first few lines fetch some useful data:\nWe've explained how to obtain the addresses and what the context is for . The CouncilContext takes a provider\nobject, which you would have previously set up in your .env file and provider.ts file.\nWe're also instantiating a VotingContract and passing it the coreV oting contract's address. You can optionally\ntell it the addresses of which V oting V ault contracts you want to consider for this instance. The addresses object\nwould have all of those addresses handy for easy access.\nGet vote data from the V otingContract\nAt this point you have a coreVoting object which is a VotingContract. We can call its getVotes() method to\nfetch all votes that have occured in it, and we can filter it out by a specific voter address:export async function getVoterActivity(): Promise<void> {\n...", "metadata": {"page_number": 102, "source": "data/delv_council_docs.pdf"}}
{"id": "a03554c9b21c", "text": "fetch all votes that have occured in it, and we can filter it out by a specific voter address:export async function getVoterActivity(): Promise<void> {\n...\n}\ngetVoterActivity();\n  const addresses = await getElementAddress();\n  // create a CouncilContext instance\n  const context = new CouncilContext(provider);\n  // Create a VotingContract instance.\n  // The vaults array can be left empty since we won't be fetching \n  // any voting power data.\n  const coreVoting = new VotingContract(addresses.coreVoting, [], context);", "metadata": {"page_number": 102, "source": "data/delv_council_docs.pdf"}}
{"id": "f3e76fe9bfa7", "text": "This line actually fetches data from the blockchain by using the provider that you've set up earlier through your\nPROVIDER_URI environment variable.\nWe'll now make a data structure for this data that is easier to output to the console in a readable format:\nThis part of the code just iterates through the VoteData that was returned by the coreVoting.getVotes()\nmethod, and creates a Record which we can then print out as a table on the console.\nEach entry in the Record holds an index, which stores the proposal ID, a Ballot object which stores the voter's\nchoice, and the votingPower used on this vote.\nFinally , we exit the process to close the program, and call the getVoterActivity async function that we've just\ncreated.\nRegister the script and execute\nTo execute this from the command line, we can add a script to the apps/council-sdk-starter/src/package.json", "metadata": {"page_number": 103, "source": "data/delv_council_docs.pdf"}}
{"id": "1dd0c462be46", "text": "created.\nRegister the script and execute\nTo execute this from the command line, we can add a script to the apps/council-sdk-starter/src/package.json\nfile, just like the other example scripts:\nOnce you've registered the getVoterActivity script, we can call it from the command line and see the results.\nJust run the following command:  // get all votes made by a specified address\n  const votes = await coreVoting.getVotes(\"0x7AE8b0D6353F0931EB9FaC0A3562fA9e4C6Ff933\");\n  // Create a data structure to print out to the console\n  const votesByProposalId: Record<number, { ballot: Ballot, votingPower: string }> = {}\n  for (const vote of votes) {\n    votesByProposalId[vote.proposal.id] = {\n      ballot: vote.ballot,", "metadata": {"page_number": 103, "source": "data/delv_council_docs.pdf"}}
{"id": "827f469bb6b8", "text": "for (const vote of votes) {\n    votesByProposalId[vote.proposal.id] = {\n      ballot: vote.ballot,\n      votingPower: vote.power\n    };\n  }\n  console.table(votesByProposalId);\n  process.exit();\n}\ngetVoterActivity();\n...\n  \"scripts\": {\n    ...\n    \"getVoterActivity\": \"ts-node -r dotenv/config -r tsconfig-paths/register \nsrc/scripts/getVoterActivity.ts\"\n  },\n...", "metadata": {"page_number": 103, "source": "data/delv_council_docs.pdf"}}
{"id": "fea63ec5372b", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nWith this, you've successfully instantiated a Council V otingContract and queried the votes that a specific voter has", "metadata": {"page_number": 104, "source": "data/delv_council_docs.pdf"}}
{"id": "7eca0872be55", "text": "DAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nWith this, you've successfully instantiated a Council V otingContract and queried the votes that a specific voter has\nmade on it, and interacted with a few parts of the SDK along the way . We're excited to see what you'll build from\nhere on out! Don't hesitate to contact us through our Discord !yarn workspace council-sdk-starter getVoterActivity", "metadata": {"page_number": 104, "source": "data/delv_council_docs.pdf"}}
{"id": "0afc59f78f77", "text": "Core V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries\nCouncil Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 105, "source": "data/delv_council_docs.pdf"}}
{"id": "b9acf689cca4", "text": "delvtech /council-kit Public\nSecurityCode Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins\nNo security policy detected\nThis project has not set up a SECURITY.md  file yet.\nThere aren\u2019t any published security advisories", "metadata": {"page_number": 106, "source": "data/delv_council_docs.pdf"}}
{"id": "b1c466d3dcb7", "text": "delvtech /council-kit Public\nSimple Proxy\nJump to bottom\nCPSTL  edited this page on Jan 10  \u00b7 1 revision\nContract Name: SimpleProxy .sol\nType/Category: Proxy\nContract Source: https://github.com/element-fi/council/blob/main/contracts/simpleProxy .sol \n1. Introduction (Summary)\nThe simple proxy is used to make a contract upgradeable by splitting the state from the logic run by the smart\ncontract. It is implemented in gas-ef ficient assembly and calls a changeable logic contract that runs the code in that\ncontract using the storage of the proxy .\n2. Contract Details\nThe key functionalities of the smart contract are the ability to accept calls from users and run the code of another\ncontract as if they had called it, and the ability to change which contract's logic is used. The simple proxy stores the\naddress of the implementation and the address allowed to upgrade that implementation.", "metadata": {"page_number": 107, "source": "data/delv_council_docs.pdf"}}
{"id": "9462a788ed36", "text": "contract as if they had called it, and the ability to change which contract's logic is used. The simple proxy stores the\naddress of the implementation and the address allowed to upgrade that implementation.\n3. Key Mechanisms & Concepts\nThe simple proxy's fallback function will take the data provided by the caller and forward that data as a delegate call\nto the implementation address, then propagate any return or error back to the caller . The fallback uses optimized\nassembly to achieve this ef ficiently . Since the proxy uses delegate call, the address of the proxy will have any state\nchanges made in it, instead of in the address of the implementation. Therefore, if the implementation is changed,\nthe new implementation will have access to the same storage. The only other function in the proxy allows a\ngovernance address to change the implementation address, which is called when the callback function executes.\n4. Gotchas (Potential source of user error)\nThe governance and implementation address is normally stored in the contract so any logic contract must use", "metadata": {"page_number": 107, "source": "data/delv_council_docs.pdf"}}
{"id": "cbd3ca58bdb6", "text": "governance address to change the implementation address, which is called when the callback function executes.\n4. Gotchas (Potential source of user error)\nThe governance and implementation address is normally stored in the contract so any logic contract must use\nthe storage library to manage storage or will almost certainly corrupt storage.\nFunction names 'upgradeProxy(address)' 'resetProxyOwner(address)' and their corresponding selectors\ncannot be used in logic contracts and are reserved for the proxy .Code Issues 14 Pull requests 2 Actions Projects 1 Wiki Security Ins", "metadata": {"page_number": 107, "source": "data/delv_council_docs.pdf"}}
{"id": "71e667796cd7", "text": "Pages 25\nCouncil W iki\nHome\nCouncil Protocol 101\nTechnical Guides\nGetting Started\nCouncil Deployment Guide\nReference UI Deployment Guide (GitHub Pages)\nHow to Create Your Own V oting V ault with Council\nSDK Guide: Using Typescript to interact with Council Contracts\nContributors Guide\nVideo T utorials\nCouncil UI Overview\nDeploying the Council UI to Github Pages\nGet Started with the Council SDK\nExtending the SDK\nGovernance Proposal Framework\nGovernance Proposal Framework Template\nDAO (Social) Proposal Template\nProtocol (Executable) Proposal Template\nSmart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault", "metadata": {"page_number": 108, "source": "data/delv_council_docs.pdf"}}
{"id": "dfa4e5bdf26e", "text": "Smart Contract Documentation\nOverview\nCore V oting\nVoting V aults Overview\nVoting V ault Example: Locking V ault\nVoting V ault Example: V esting V ault\nVoting V ault Example: Governance Steering Council (GSC)\nPossible V oting V aults Examples\nTimelock\nTreasury\nSpender\nOptimistic Grants\nOptimistic Rewards\nSimple Proxy\nGlossaries5. Failure Modes (Bounds on Operating Conditions & External Risk\nFactors)\nThe governance address can make any change to the storage or usage of the proxy; therefore, upgradable\ncontracts are only as secure as their governance mechanism. If governance is corrupted the whole contract is\nalso corrupted.", "metadata": {"page_number": 108, "source": "data/delv_council_docs.pdf"}}
{"id": "32d032aa76ea", "text": "Council Glossary\nAudits\nAudit Reports\nClone this wiki locally\nhttps://github.com/delvtech/council-kit.wiki.git", "metadata": {"page_number": 109, "source": "data/delv_council_docs.pdf"}}
